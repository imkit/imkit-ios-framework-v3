// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IMKit
import AVFoundation
import AVKit
import ActiveLabel
import Alamofire
import CommonCrypto
import CommonCrypto/*.CC_LONG*/
import CommonCrypto/*.CC_MD5*/
import CommonCrypto/*.CC_MD5_DIGEST_LENGTH*/
import Contacts
import CoreLocation
import CryptoKit
import DifferenceKit
import FloatingPanel
import Foundation
import Hero
import IGListKit
@_exported import IMKit
import Kingfisher
import LinkPresentation
import MapKit
import MobileCoreServices
import Moya
import Photos
import PhotosUI
import PromiseKit
import QuickLook
import Realm
import RealmSwift
import SnapKit
import SocketIO
import Swift
import SwiftLinkPreview
import SwiftyJSON
import TagListView
import UIKit
public protocol IMSocketManagerDelegate : AnyObject {
  func socketDidReceiveMessage(message: IMMessage)
  func socketDidReceiveRoom(room: IMRoom)
  func socketDidReceiveLastReadMessage(roomID: Swift.String, uid: Swift.String, messageID: Swift.String)
  func socketDidReceiveTyping(roomID: Swift.String, uid: Swift.String)
  func socketDidReceiveInvitation(invitation: IMInvitation)
  func socketDidReceiveCancelInvitation(invitationID: Swift.String)
  func socketDidReceiveMyPrefChange(json: SwiftyJSON.JSON)
  func socketDidReceiveRoomPref(json: SwiftyJSON.JSON)
}
extension IMSocketManagerDelegate {
  public func socketDidReceiveMessage(message: IMMessage)
  public func socketDidReceiveRoom(room: IMRoom)
  public func socketDidReceiveLastReadMessage(roomID: Swift.String, uid: Swift.String, messageID: Swift.String)
  public func socketDidReceiveTyping(roomID: Swift.String, uid: Swift.String)
  public func socketDidReceiveInvitation(invitation: IMInvitation)
  public func socketDidReceiveCancelInvitation(invitationID: Swift.String)
  public func socketDidReceiveMyPrefChange(json: SwiftyJSON.JSON)
  public func socketDidReceiveRoomPref(json: SwiftyJSON.JSON)
}
@_hasMissingDesignatedInitializers public class IMSocketManagerDelegateBox {
  weak public var weakRef: IMSocketManagerDelegate?
  @objc deinit
}
public enum IMSocketEventType : Swift.String {
  case handshake
  case room
  case message
  case typing
  case lastRead
  case conf
  case invitation
  case cancelInvitation
  case myPrefChange
  case roomPref
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class IMSocketManager {
  public enum EncodingType : Swift.String {
    case Base64
    case Custom
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Constant {
  }
  public static let shared: IMSocketManager
  final public var isEnabled: Swift.Bool
  final public var isAuthV1: Swift.Bool
  final public var status: Swift.String {
    get
  }
  final public var encodingType: IMSocketManager.EncodingType
  final public func configure(with delegate: IMSocketManagerDelegate)
  final public func connect()
  final public func disconnect()
  final public func type(roomID: Swift.String, text: Swift.String)
  @objc deinit
}
final public class IMSubscribeTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(fcmToken: Swift.String, type: Swift.String = "fcm") -> PromiseKit.Promise<IMSubscribeTask.ResponseType>
  @objc deinit
}
public enum IMKitTranslationError : Foundation.LocalizedError {
  case missingTranslationKey
  public static func == (a: IMKitTranslationError, b: IMKitTranslationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension IMKitTranslationError {
  public var errorDescription: Swift.String? {
    get
  }
}
final public class IMTranslationTask : NetworkRequest {
  public typealias ResponseType = (Swift.String, Swift.String)
  public init()
  final public var baseURL: Swift.String
  final public var headers: [Swift.String : Swift.String] {
    get
  }
  final public var endpoint: Swift.String {
    get
  }
  final public var encoding: Alamofire.ParameterEncoding {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(messageID: Swift.String, textToTranslate: Swift.String, targetLanguage: Swift.String) -> PromiseKit.Promise<IMTranslationTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMDateSectionController : IGListKit.ListSectionController {
  @objc override final public func numberOfItems() -> Swift.Int
  @objc override final public func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override final public func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override final public func didUpdate(to object: Any)
  @objc override final public func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IMMessagesManagerDelegateBox {
  weak public var weakRef: IMMessagesManagerDelegate?
  @objc deinit
}
public protocol IMMessagesManagerDelegate : AnyObject {
  func messageDidSend(message: IMMessage)
  func messagesDidAdd(messages: [IMMessage])
  func messageDidUpdate(targetMessageID: Swift.String, message: IMMessage)
  func messagesDidUpdate(messages: [IMMessage])
  func messageDidAdd(message: IMMessage)
  func messageDidRemove(messageID: Swift.String)
  func messageRoomDidUpdate(roomID: Swift.String)
}
extension IMMessagesManagerDelegate {
  public func messageDidSend(message: IMMessage)
  public func messagesDidAdd(messages: [IMMessage])
  public func messageDidUpdate(targetMessageID: Swift.String, message: IMMessage)
  public func messagesDidUpdate(messages: [IMMessage])
  public func messageDidAdd(message: IMMessage)
  public func messageDidRemove(messageID: Swift.String)
  public func messageRoomDidUpdate(roomID: Swift.String)
}
public protocol IMProgressDelegate : AnyObject {
  func setProgress(_ progress: Swift.Double)
  func requestDidResponse()
}
extension IMProgressDelegate {
  public func requestDidResponse()
}
@_hasMissingDesignatedInitializers public class IMProgressDelegateBox {
  weak public var weakRef: IMProgressDelegate?
  @objc deinit
}
@_hasMissingDesignatedInitializers open class IMMessagesManager {
  public static let shared: IMMessagesManager
  public var roomID: Swift.String? {
    get
  }
  public var delegates: [IMMessagesManagerDelegateBox]
  public var sentMessageMd5s: [Swift.String]
  final public let linkPreviewCache: InMemoryCache
  public var progressDelegates: [Swift.String : IMProgressDelegateBox]
  public var providers: [Swift.String : [IMMoyaProvider<IMService>]]
  public var isMessagesSelectable: Swift.Bool
  public var selectedMessageIDs: [Swift.String]
  public var selectedImages: [(messageId: Swift.String, imageId: Swift.String)]
  public var isMessagesEditable: Swift.Bool
  public var editingMessageID: Swift.String?
  public var numberOfMessagesPerRequest: Swift.Int
  public var highlightedMessageID: Swift.String?
  public var highlightedText: Swift.String?
  public func configure(roomID: Swift.String)
  public func configure(delegate: IMMessagesManagerDelegate)
  public func fetchUnsyncMessagesFromServer() -> PromiseKit.Promise<[IMMessage]>
  public func fetchMessagesFromLocalStorage(numberOfMessages: Swift.Int? = nil, after messageID1: Swift.String? = nil, before messageID2: Swift.String? = nil, messageType: IMMessageType? = nil) -> PromiseKit.Promise<[IMMessage]>
  public func fetchMessagesFromRealm(before date1: Foundation.Date, after date2: Foundation.Date, numberOfPreload: Swift.Int) -> PromiseKit.Promise<[IMMessage]>
  public func searchMessagesFromLocalStorage(keyword: Swift.String) -> [IMMessage]
  public func addMessagesToLocalStorage(messages: [IMMessage])
  public func addMessageToLocalStorage(message: IMMessage)
  public func deleteMessageFromLocalStorage(messageID: Swift.String, needsUpdateUI: Swift.Bool = false)
  open func sendMessage(message: IMMessage, parameters: [Swift.String : Any] = [:])
  public func sendTextMessage(message: IMMessage)
  public func sendStickerMessage(message: IMMessage)
  public func uploadIMImage(_ image: IMImage, progress: @escaping ((Swift.Float) -> Swift.Void), completion: @escaping ((IMImage?) -> Swift.Void))
  public func sendImageMessage(message: IMMessage)
  public func sendFileMessage(message: IMMessage)
  public func sendLocationMessage(message: IMMessage)
  public func syncLocalStoredMessages()
  public func processLinkPreviews(messageID: Swift.String, text: Swift.String)
  public func translate(text: Swift.String, messageID: Swift.String, toLanguage language: Swift.String)
  @objc deinit
}
extension IMMessagesManager : IMSocketManagerDelegate {
  public func socketDidReceiveMessage(message: IMMessage)
  public func socketDidReceiveLastReadMessage(roomID: Swift.String, uid: Swift.String, messageID: Swift.String)
}
final public class IMUpdateRoomPrefsTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(id: Swift.String, parameters: [Swift.String : Any]? = nil) -> PromiseKit.Promise<IMUpdateRoomPrefsTask.ResponseType>
  @objc deinit
}
final public class IMJoinRoomTask : NetworkRequest {
  public typealias ResponseType = IMRoom
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(id: Swift.String, isSystemMessageEnabled: Swift.Bool = true) -> PromiseKit.Promise<IMJoinRoomTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMResponseObjectInputAccessoryView : UIKit.UIView {
  public static var imagePlaceholder: UIKit.UIImage?
  public typealias Style = IMStyle.messages.inputAccessory.response
  open var avatarView: IMAvatarView {
    get
    set
  }
  open var stakeViewRightConstraint: SnapKit.Constraint?
  open var stackView: UIKit.UIStackView {
    get
    set
  }
  open var namelabel: UIKit.UILabel {
    get
    set
  }
  open var textlabel: UIKit.UILabel {
    get
    set
  }
  open var imageView: UIKit.UIImageView {
    get
    set
  }
  open var closeButton: UIKit.UIButton {
    get
    set
  }
  weak public var responseObject: IMResponseObject? {
    get
    set
  }
  weak public var viewController: UIKit.UIViewController?
  open var onDismiss: (() -> Swift.Void)?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func updateUI()
  @objc open func close()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMInvitation : RealmSwift.Object, DifferenceKit.Differentiable {
  @objc dynamic final public var id: Swift.String
  @objc dynamic final public var name: Swift.String
  final public var coverURL: Foundation.URL? {
    get
  }
  final public let members: RealmSwift.List<IMUser>
  @objc dynamic final public var inviter: IMUser?
  @objc dynamic final public var createDate: Foundation.Date
  @objc dynamic final public var updateDate: Foundation.Date
  final public var displayName: Swift.String {
    get
  }
  public init(from json: SwiftyJSON.JSON)
  @objc required override dynamic public init()
  public static var customizedLastMessage: ((IMInvitation) -> Swift.String?)?
  @objc override public static func primaryKey() -> Swift.String?
  final public var differenceIdentifier: Swift.String {
    get
  }
  final public func diffIdentifier() -> ObjectiveC.NSObjectProtocol
  final public func isContentEqual(to source: IMInvitation) -> Swift.Bool
  final public func copy() -> IMInvitation
  public typealias DifferenceIdentifier = Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMMessagesSelectionInputAccessoryViewController : UIKit.UIInputViewController {
  open var padding: CoreGraphics.CGFloat
  open var forwardButton: UIKit.UIButton {
    get
    set
  }
  open var cancelButton: UIKit.UIButton {
    get
    set
  }
  open var line: UIKit.UIView {
    get
    set
  }
  weak public var viewController: UIKit.UIViewController?
  public var numberOfSelectedMessages: Swift.Int {
    get
    set
  }
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewSafeAreaInsetsDidChange()
  @objc override dynamic open func viewDidLayoutSubviews()
  open func updateUI()
  @objc open func forwardButtonTapped()
  @objc open func cancelButtonTapped()
  open func updateForwardButton()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class IMDownloadFileTask : NetworkRequest {
  public static let downloadDirectory: Foundation.URL
  public typealias ResponseType = Foundation.URL
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var downloadProgress: Alamofire.DownloadRequest.ProgressHandler {
    get
  }
  final public var downloadFileDestination: Alamofire.DownloadRequest.Destination {
    get
  }
  final public func perform(url: Foundation.URL, localPath: Foundation.URL, progressHandler: @escaping Alamofire.DownloadRequest.ProgressHandler) -> PromiseKit.Promise<IMDownloadFileTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMRoomGroupTableViewCell : UIKit.UITableViewCell {
  open var indicatorImageView: UIKit.UIImageView {
    get
    set
  }
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var detailLabel: UIKit.UILabel {
    get
    set
  }
  weak open var roomGroup: IMRoomGroup? {
    get
    set
  }
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  open func updateUI()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class IMTagsViewController : UIKit.UIViewController {
  open var tableView: UIKit.UITableView {
    get
    set
  }
  open var button: UIKit.UIButton {
    get
    set
  }
  open var roomId: Swift.String
  open var tags: [IMTag]
  open var identifier: Swift.String
  open var hasDiff: Swift.Bool {
    get
  }
  open var onCompletion: (([IMTag]) -> Swift.Void)?
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc open func buttonTapped()
  open func presentAddTagViewController()
  @objc open func closeButtonTapped()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension IMTagsViewController : UIKit.UITableViewDelegate {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
}
extension IMTagsViewController : UIKit.UITableViewDataSource {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension IMTagsViewController : IMTagTableViewCellDelegate {
  open func deleteButtonTapped(tag: IMTag)
  open func editButtonTapped(tag: IMTag)
}
public protocol IMTagTableViewCellDelegate : AnyObject {
  func deleteButtonTapped(tag: IMTag)
  func editButtonTapped(tag: IMTag)
}
@objc @_inheritsConvenienceInitializers open class IMTagTableViewCell : UIKit.UITableViewCell {
  open var tagColorImageView: UIKit.UIImageView {
    get
    set
  }
  open var label: UIKit.UILabel {
    get
    set
  }
  open var deleteButton: UIKit.UIButton {
    get
    set
  }
  open var editButton: UIKit.UIButton {
    get
    set
  }
  open var dottedLineLayer: QuartzCore.CAShapeLayer {
    get
    set
  }
  weak open var delegate: IMTagTableViewCellDelegate?
  open var mainTag: IMTag? {
    get
    set
  }
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func prepareForReuse()
  open func setupUI()
  open func updateUI()
  @objc open func deleteButtonTapped()
  @objc open func editButtonTapped()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMSystemMessageCollectionViewCell : UIKit.UICollectionViewCell {
  weak final public var message: IMMessage? {
    get
    set
  }
  @objc override final public func prepareForReuse()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class IMUpdateRoomTask : NetworkRequest {
  public typealias ResponseType = IMRoom
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(id: Swift.String, name: Swift.String? = nil, coverURL: Foundation.URL? = nil, description: Swift.String? = nil, roomType: IMRoomType? = nil) -> PromiseKit.Promise<IMUpdateRoomTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMAudioMessageSectionController : IGListKit.ListSectionController, IMMessageSectionController {
  weak public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
extension IMAudioMessageSectionController : IMMessageCellDelegate {
}
@objc @_inheritsConvenienceInitializers final public class IMResponseObject : RealmSwift.Object {
  @objc dynamic final public var id: Swift.String {
    get
  }
  @objc dynamic final public var senderID: Swift.String {
    get
  }
  final public var sender: IMUser? {
    get
  }
  @objc dynamic final public var text: Swift.String {
    get
  }
  @objc dynamic final public var stickerID: Swift.String? {
    get
  }
  @objc dynamic final public var imageString: Swift.String?
  final public var imageURL: Foundation.URL? {
    get
  }
  @objc required override dynamic public init()
  public init(from json: SwiftyJSON.JSON)
  public init(id: Swift.String, senderID: Swift.String, text: Swift.String, imageURL: Foundation.URL? = nil, stickerID: Swift.String? = nil)
  final public func copy() -> IMResponseObject
  @objc deinit
}
final public class IMSendMessageTask : NetworkRequest {
  public typealias ResponseType = IMMessage
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(with roomID: Swift.String, parameters: [Swift.String : Any]) -> PromiseKit.Promise<IMSendMessageTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMCarouselTemplateTableViewCell : IMMessageTableViewCell {
  open var collectionView: UIKit.UICollectionView {
    get
    set
  }
  open var sizes: [CoreGraphics.CGSize]
  open var maxHeight: CoreGraphics.CGFloat {
    get
  }
  override open func setupUI(_ reuseIdentifier: Swift.String?)
  override open func updateUI()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMCarouselTemplateTableViewCell : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, insetForSectionAt section: Swift.Int) -> UIKit.UIEdgeInsets
}
extension IMCarouselTemplateTableViewCell : UIKit.UICollectionViewDataSource {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers final public class IMImage : RealmSwift.Object {
  @objc dynamic final public var id: Swift.String
  @objc dynamic final public var messageId: Swift.String
  @objc dynamic final public var width: Swift.Int
  @objc dynamic final public var height: Swift.Int
  @objc dynamic final public var originImageData: Foundation.Data?
  @objc dynamic final public var thumbnailImageData: Foundation.Data?
  final public var asset: Photos.PHAsset?
  final public var size: CoreGraphics.CGSize {
    get
    set
  }
  final public var originURL: Foundation.URL? {
    get
  }
  final public var thumbnailURL: Foundation.URL? {
    get
  }
  final public func fetchImage() -> PromiseKit.Promise<UIKit.UIImage?>
  @objc override public static func ignoredProperties() -> [Swift.String]
  @objc required override dynamic public init()
  @objc override public static func primaryKey() -> Swift.String?
  public init(json: SwiftyJSON.JSON)
  public init(originImageString: Swift.String, thumbnailImageString: Swift.String, width: Swift.Int, height: Swift.Int)
  public init(image: UIKit.UIImage)
  public init(asset: Photos.PHAsset)
  final public func copy() -> IMImage
  final public func set(originImageString: Swift.String, thumbnailImageString: Swift.String)
  final public func set(image: UIKit.UIImage)
  @objc deinit
}
open class IMDeletePrefTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  public var endpoint: Swift.String {
    get
  }
  public var method: Alamofire.HTTPMethod {
    get
  }
  public func perform(key: Swift.String) -> PromiseKit.Promise<IMDeletePrefTask.ResponseType>
  @objc deinit
}
final public class IMAddMembersTask : NetworkRequest {
  public typealias ResponseType = IMRoom
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(roomID: Swift.String, invitees: [Swift.String], isSystemMessageEnabled: Swift.Bool = true, needsInvitation: Swift.Bool = false) -> PromiseKit.Promise<IMAddMembersTask.ResponseType>
  @objc deinit
}
public protocol IMChatRoomViewModelDelagate : AnyObject {
  func reloadData()
  func insert(sections: [[IMMessage]], rows: [IMMessage])
  func reload(at indexPaths: [Foundation.IndexPath])
  func insert(at indexPaths1: [Foundation.IndexPath], reloadAt indexPaths2: [Foundation.IndexPath])
  func insert(at sections: Foundation.IndexSet)
  func deleteRows(at indexPaths: [Foundation.IndexPath])
  func deleteSections(_ sections: Foundation.IndexSet)
  func stateDidChange(state: ViewModelState)
  func safeScrollToRow(at indexPath: Foundation.IndexPath, at scrollPosition: UIKit.UITableView.ScrollPosition, animated: Swift.Bool)
  func roomDidUpdate(room: IMRoom)
}
open class IMChatRoomViewModel {
  weak open var delegate: IMChatRoomViewModelDelagate?
  final public let roomID: Swift.String
  open var room: IMRoom? {
    get
  }
  open var sections: [[IMMessage]]
  open var state: ViewModelState {
    get
    set
  }
  open var isViewpointKeptAtBottom: Swift.Bool
  public init(roomID: Swift.String)
  open func fetchMessages()
  open func loadMessages()
  open func navigateToMessage(id: Swift.String)
  open func read(message: IMMessage?)
  @objc deinit
}
extension IMChatRoomViewModel : IMRoomsManagerDelegate {
  open func roomDidUpdate(room: IMRoom)
}
extension IMChatRoomViewModel : IMMessagesManagerDelegate {
  open func messageDidUpdate(targetMessageID: Swift.String, message: IMMessage)
  open func messageDidAdd(message: IMMessage)
  open func messagesDidUpdate(messages: [IMMessage])
  open func messageDidRemove(messageID: Swift.String)
}
extension IMChatRoomViewModel : IMSocketManagerDelegate {
  open func socketDidReceiveTyping(roomID: Swift.String, uid: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class IMTextMessageTableViewCell : IMMessageTableViewCell {
  open var label: ActiveLabel {
    get
    set
  }
  open var translatedTextLabel: UIKit.UILabel {
    get
    set
  }
  open var tableView: UIKit.UITableView {
    get
    set
  }
  open var isTableViewInitiated: Swift.Bool
  open var responseView: IMTextMessageResponseView {
    get
    set
  }
  open var isResponseViewInitiated: Swift.Bool
  @objc override dynamic open func prepareForReuse()
  override open func setupUI(_ reuseIdentifier: Swift.String?)
  override open func updateUI()
  @objc open func responseViewDidTap()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMTextMessageTableViewCell : UIKit.UITableViewDelegate {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension IMTextMessageTableViewCell : UIKit.UITableViewDataSource {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension IMTextMessageTableViewCell : UIKit.UITableViewDataSourcePrefetching {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, prefetchRowsAt indexPaths: [Foundation.IndexPath])
}
public enum HorizontalAlignment {
  case left
  case right
  case leading
  case trailing
  case justified
  public static func == (a: HorizontalAlignment, b: HorizontalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VerticalAlignment {
  case top
  case center
  case bottom
  public static func == (a: VerticalAlignment, b: VerticalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc open class AlignedCollectionViewFlowLayout : UIKit.UICollectionViewFlowLayout {
  public var horizontalAlignment: HorizontalAlignment
  public var verticalAlignment: VerticalAlignment
  public init(horizontalAlignment: HorizontalAlignment = .justified, verticalAlignment: VerticalAlignment = .center)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc override dynamic open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc override dynamic public init()
  @objc deinit
}
final public class IMDeclineInvitationTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public func perform(roomID: Swift.String) -> PromiseKit.Promise<IMDeclineInvitationTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMButtonsTemplateSectionController : IGListKit.ListSectionController, IMMessageSectionController, IMMessageCellDelegate {
  weak public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(*, deprecated, renamed: "IMFetchNumberOfUnreadMessagesTask")
public class IMFetchBadgeTask : IMFetchNumberOfUnreadMessagesTask {
  override public init()
  @objc deinit
}
public class IMFetchNumberOfUnreadMessagesTask : NetworkRequest {
  public typealias ResponseType = Swift.Int
  public init()
  public var endpoint: Swift.String {
    get
  }
  public var method: Alamofire.HTTPMethod {
    get
  }
  public func perform() -> PromiseKit.Promise<IMFetchNumberOfUnreadMessagesTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class TriangleView : UIKit.UIView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMMessagesViewController : UIObservableViewController {
  public static var showNumberOfUnreadOnBackButton: Swift.Bool
  open var adapter: IGListKit.ListAdapter {
    get
    set
  }
  open var collectionView: IGListKit.ListCollectionView {
    get
    set
  }
  open var bottomButtonBottomConstraint: SnapKit.Constraint?
  open var bottomButton: UIKit.UIButton {
    get
    set
  }
  open var inputBarViewController: IMInputAccessoryViewController {
    get
    set
  }
  open var messagesSelectionInputAccessoryViewController: IMMessagesSelectionInputAccessoryViewController {
    get
    set
  }
  open var stickerInputViewController: UIKit.UIInputViewController {
    get
    set
  }
  open var audioInputViewController: IMAudioInputViewController {
    get
    set
  }
  open var utilityInputViewController: IMUtilityInputViewController {
    get
    set
  }
  open var templateInputViewController: IMTemplateInputViewController {
    get
    set
  }
  open var photoInputViewController: IMPhotoInputViewController {
    get
    set
  }
  open var stickerPreviewViewBottomConstraint: SnapKit.Constraint?
  open var stickerPreviewView: IMStickerPreviewView {
    get
    set
  }
  open var stickerMessage: IMMessage? {
    get
    set
  }
  open var disableInputAccessoryViewController: IMDisableInputAccessoryViewController {
    get
    set
  }
  public var viewModel: IMMessagesViewModel!
  public var roomID: Swift.String
  @objc override dynamic open var inputAccessoryViewController: UIKit.UIInputViewController? {
    @objc get
  }
  @objc override dynamic open var inputViewController: UIKit.UIInputViewController? {
    @objc get
  }
  open var tapGestureRecognizer: UIKit.UITapGestureRecognizer {
    get
    set
  }
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var muteIndicator: UIKit.UIImageView {
    get
    set
  }
  open var downIndicator: UIKit.UIImageView {
    get
    set
  }
  open var triangleView: TriangleView {
    get
    set
  }
  public var stackView: UIKit.UIStackView {
    get
    set
  }
  public var customView: UIKit.UIView? {
    get
    set
  }
  open var emptyViewOfMessageSearching: UIKit.UIView?
  convenience public init(roomID: Swift.String)
  @objc deinit
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
  @objc override dynamic open func viewDidLayoutSubviews()
  override open func applicationDidBecomeActive()
  override open func applicationWillResignActive()
  override open func deviceOrientationDidChange()
  override open func keyboardWillShow(with keyboardRect: CoreGraphics.CGRect, duration: Foundation.TimeInterval, animationCurve: Swift.UInt)
  override open func keyboardWillHide(with keyboardRect: CoreGraphics.CGRect, duration: Foundation.TimeInterval, animationCurve: Swift.UInt)
  override open func keyboardWillChangeFrame(with keyboardRect: CoreGraphics.CGRect, duration: Foundation.TimeInterval, animationCurve: Swift.UInt)
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func present(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  public func setCollectionViewInset()
  open func prepareNavigationBar()
  open func hideSearchingNavigationViewIfNeeded()
  open func isShowingSearchingView() -> Swift.Bool
  @objc open func infoButtonTapped()
  @objc open func searchButtonTapped()
  open func presentMessageSearchingViewController()
  open func dismissMessageSearchingViewControllerIfNeeded()
  public func navigateToMessage(id: Swift.String)
  @objc public func titleViewTapped()
  public func presentDocumentPicker()
  public func presentLocationPicker()
  open func customizedUsername(_ message: IMMessage) -> Swift.String?
  open func customizedUserAvatarURL(_ message: IMMessage) -> Foundation.URL?
  open func avatarDidTapped(user: IMUser)
  open func didTapReport(_ message: IMMessage)
  open func viewModelStateDidChange(state: ViewModelState)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension IMMessagesViewController : IGListKit.ListAdapterDataSource {
  @objc dynamic open func objects(for listAdapter: IGListKit.ListAdapter) -> [IGListDiffKit.ListDiffable]
  @objc dynamic open func listAdapter(_ listAdapter: IGListKit.ListAdapter, sectionControllerFor object: Any) -> IGListKit.ListSectionController
  @objc dynamic open func emptyView(for listAdapter: IGListKit.ListAdapter) -> UIKit.UIView?
}
extension IMMessagesViewController : IMMessagesViewModelDelagate {
  public func reloadData(isViewpointKeptAtBottom: Swift.Bool = true)
  public func performUpdates(_ isViewpointKeptAtBottom: Swift.Bool)
  public func reloadObjects(objects: [Any])
  public func performUpdatesWithoutDisplacement()
  public func scroll(to object: Any)
  @objc dynamic open func messagesDidSelect(_ messages: [IMMessage])
  @objc dynamic open func performUpdate(_ room: IMRoom)
  public func messageDidAdd(_ message: IMMessage)
  public func reloadInputBar()
  public func stateDidChange(state: ViewModelState)
}
extension IMMessagesViewController : IMNetworkReachabilityManagerDelegate {
  public func networkStatusChanged(_ status: Alamofire.NetworkReachabilityManager.NetworkReachabilityStatus)
}
extension IMMessagesViewController : UIKit.UICollectionViewDelegate {
  @objc dynamic open func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
  @objc dynamic open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc dynamic open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
extension IMMessagesViewController : UIKit.UINavigationControllerDelegate {
  @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, animationControllerFor operation: UIKit.UINavigationController.Operation, from fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, interactionControllerFor animationController: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
}
extension IMMessagesViewController : UIKit.UIPopoverPresentationControllerDelegate {
  @objc dynamic open func adaptivePresentationStyle(for controller: UIKit.UIPresentationController) -> UIKit.UIModalPresentationStyle
}
@_hasMissingDesignatedInitializers final public class IMPendingInvitation {
  final public var invitee: IMUser? {
    get
  }
  final public var inviter: IMUser? {
    get
  }
  final public var createTime: Foundation.Date {
    get
  }
  final public var updateTime: Foundation.Date {
    get
  }
  @objc deinit
}
final public class IMAcceptInvitationTask : NetworkRequest {
  public typealias ResponseType = IMRoom
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(id: Swift.String, isSystemMessageEnabled: Swift.Bool = true) -> PromiseKit.Promise<IMAcceptInvitationTask.ResponseType>
  @objc deinit
}
final public class IMDeleteRoomTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public func perform(roomdID: Swift.String) -> PromiseKit.Promise<IMDeleteRoomTask.ResponseType>
  @objc deinit
}
final public class IMCreateGroupChatTask : NetworkRequest {
  public typealias ResponseType = IMRoom
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(roomID: Swift.String? = nil, roomName: Swift.String? = nil, coverURL: Foundation.URL? = nil, description: Swift.String? = nil, invitees: [Swift.String], isSystemMessageEnabled: Swift.Bool = true, needsInvitation: Swift.Bool = false) -> PromiseKit.Promise<IMCreateGroupChatTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMStickerCollectionViewCell : UIKit.UICollectionViewCell {
  public static var imagePlaceholder: UIKit.UIImage?
  final public var imageView: UIKit.UIImageView {
    get
    set
  }
  @objc override final public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  final public var stickerID: Swift.String? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override final public func prepareForReuse()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMSystemMessageSectionController : IGListKit.ListSectionController {
  weak public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
final public class IMFetchTokenTask : NetworkRequest {
  public typealias ResponseType = Swift.String
  public init()
  final public var baseURL: Swift.String {
    get
  }
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(uid: Swift.String) -> PromiseKit.Promise<IMFetchTokenTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMAddFolderViewController : UIKit.UIViewController {
  open var textField: IMTextField {
    get
    set
  }
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var tableView: UIKit.UITableView {
    get
    set
  }
  open var button: UIKit.UIButton {
    get
    set
  }
  open var roomGroup: IMRoomGroup? {
    get
    set
  }
  open var rooms: [IMRoom]
  open var selectedRoomIds: [Swift.String]
  @objc override dynamic open func viewDidLoad()
  @objc open func buttonTapped()
  @objc open func closeButtonTapped()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMAddFolderViewController : UIKit.UITextFieldDelegate {
  @objc dynamic open func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc dynamic open func textFieldDidChange(_ textField: UIKit.UITextField)
}
extension IMAddFolderViewController : UIKit.UITableViewDelegate {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension IMAddFolderViewController : UIKit.UITableViewDataSource {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension IMAddFolderViewController : UIKit.UITableViewDataSourcePrefetching {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, prefetchRowsAt indexPaths: [Foundation.IndexPath])
}
@objc @_inheritsConvenienceInitializers open class IMAddFolderTableViewCell : UIKit.UITableViewCell {
  open var checkBoxImageView: UIKit.UIImageView {
    get
    set
  }
  open var avatarView: IMAvatarView {
    get
    set
  }
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var detailLabel: UIKit.UILabel {
    get
    set
  }
  open var stackView: UIKit.UIStackView {
    get
    set
  }
  open var room: IMRoom? {
    get
    set
  }
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  open func setupUI()
  open func updateUI()
  @objc deinit
}
public protocol IMMessagesViewModelDelagate : AnyObject {
  func performUpdates(_ isViewpointKeptAtBottom: Swift.Bool)
  func reloadObjects(objects: [Any])
  func performUpdatesWithoutDisplacement()
  func reloadData(isViewpointKeptAtBottom: Swift.Bool)
  func performUpdate(_ room: IMRoom)
  func scroll(to object: Any)
  func messageDidAdd(_ message: IMMessage)
  func reloadInputBar()
  func stateDidChange(state: ViewModelState)
}
final public class IMMessagesViewModel {
  final public var state: ViewModelState {
    get
  }
  final public var data: [IGListDiffKit.ListDiffable]
  final public let roomID: Swift.String
  final public var room: IMRoom? {
    get
  }
  final public var isViewpointKeptAtBottom: Swift.Bool
  final public var typingIndicatorText: Swift.String?
  final public var hasAllMessages: Swift.Bool
  final public var isRemovedFromRoom: Swift.Bool
  public init(roomID: Swift.String, delegate: IMMessagesViewModelDelagate)
  final public func fetchMessages()
  final public func loadMessages()
  final public func read(message: IMMessage?)
  final public func navigateToMessage(id: Swift.String)
  @objc deinit
}
extension IMMessagesViewModel : IMSocketManagerDelegate {
  final public func socketDidReceiveTyping(roomID: Swift.String, uid: Swift.String)
}
extension IMMessagesViewModel : IMRoomsManagerDelegate {
  final public func roomDidUpdate(room: IMRoom)
}
extension IMMessagesViewModel : IMMessagesManagerDelegate {
  final public func messageDidUpdate(targetMessageID: Swift.String, message: IMMessage)
  final public func messagesDidUpdate(messages: [IMMessage])
  final public func messagesDidAdd(messages: [IMMessage])
  final public func messageDidAdd(message: IMMessage)
  final public func messageDidRemove(messageID: Swift.String)
  final public func messageRoomDidUpdate(roomID: Swift.String)
}
final public class IMFetchRoomTask : NetworkRequest {
  public typealias ResponseType = IMRoom
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public func perform(roomID: Swift.String) -> PromiseKit.Promise<IMFetchRoomTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IMProgessView : UIKit.UIView {
  public func setProgress(_ progress: Swift.Float, animated: Swift.Bool)
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class IMPaddingLabel : UIKit.UILabel {
  @objc override dynamic open func drawText(in rect: CoreGraphics.CGRect)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class IMReadMessageTask : NetworkRequest {
  public typealias ResponseType = IMMemberProperty
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(roomID: Swift.String, messageID: Swift.String) -> PromiseKit.Promise<IMReadMessageTask.ResponseType>
  @objc deinit
}
public struct IMTemplate {
  public var title: Swift.String
  public var message: Swift.String
  public init(title: Swift.String, message: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class IMTemplateInputViewController : UIKit.UIInputViewController {
  open var templates: [IMTemplate]
  weak open var viewController: UIKit.UIViewController?
  open var collectionView: UIKit.UICollectionView {
    get
    set
  }
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidLayoutSubviews()
  open func setViewSize()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMTemplateInputViewController : UIKit.UICollectionViewDelegate {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension IMTemplateInputViewController : UIKit.UICollectionViewDataSource {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension IMTemplateInputViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
@objc @_inheritsConvenienceInitializers open class IMTemplateCollectionViewCell : UIKit.UICollectionViewCell {
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var messageLabel: UIKit.UILabel {
    get
    set
  }
  open var separator: UIKit.UIView {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  open func setupUI()
  open var template: IMTemplate? {
    get
    set
  }
  open func updateUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMLiteUser : RealmSwift.Object {
  @objc dynamic public var id: Swift.String {
    get
  }
  @objc dynamic public var nickname: Swift.String {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public var avatarURL: Foundation.URL? {
    get
    set
  }
  @objc required override dynamic public init()
  public init(from json: SwiftyJSON.JSON)
  public init(id: Swift.String, nickname: Swift.String? = nil, avatarString: Swift.String = "")
  @objc override public static func ignoredProperties() -> [Swift.String]
  public func copy() -> IMLiteUser
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMUser : RealmSwift.Object, IGListDiffKit.ListDiffable {
  @objc dynamic final public var id: Swift.String {
    get
  }
  @objc dynamic final public var nickname: Swift.String
  @objc dynamic final public var desc: Swift.String {
    get
  }
  @objc dynamic final public var lastLoginTime: Foundation.Date {
    get
  }
  final public var avatarURL: Foundation.URL? {
    get
    set
  }
  final public var displayName: Swift.String {
    get
  }
  @objc required override dynamic public init()
  public init(from json: SwiftyJSON.JSON)
  convenience public init(from dict: [Swift.String : Any])
  public init(id: Swift.String, nickname: Swift.String? = nil, avatarString: Swift.String? = nil)
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func ignoredProperties() -> [Swift.String]
  @objc final public func diffIdentifier() -> ObjectiveC.NSObjectProtocol
  @objc final public func isEqual(toDiffableObject object: IGListDiffKit.ListDiffable?) -> Swift.Bool
  final public func copy() -> IMUser
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMRoomGroup : RealmSwift.Object, DifferenceKit.Differentiable {
  @objc dynamic final public var id: Swift.String
  @objc dynamic final public var name: Swift.String
  @objc dynamic final public var order: Swift.Int
  final public var roomIDs: RealmSwift.List<Swift.String>
  final public var rooms: [IMRoom] {
    get
  }
  public init(json: SwiftyJSON.JSON)
  public init(name: Swift.String)
  @objc required override dynamic public init()
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func indexedProperties() -> [Swift.String]
  final public var differenceIdentifier: Swift.String {
    get
  }
  final public func diffIdentifier() -> ObjectiveC.NSObjectProtocol
  final public func isContentEqual(to source: IMRoomGroup) -> Swift.Bool
  final public func copy() -> IMRoomGroup
  public typealias DifferenceIdentifier = Swift.String
  @objc deinit
}
final public class IMCreateRoomTask : NetworkRequest {
  public typealias ResponseType = IMRoom
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(id: Swift.String? = nil, name: Swift.String? = nil, description: Swift.String? = nil, coverURL: Foundation.URL? = nil) -> PromiseKit.Promise<IMCreateRoomTask.ResponseType>
  @objc deinit
}
final public class IMFetchQuittedRoomsTask : NetworkRequest {
  public typealias ResponseType = IMRoom
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public func perform() -> PromiseKit.Promise<[IMFetchQuittedRoomsTask.ResponseType]>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMTextField : UIKit.UITextField {
  @objc override dynamic open func textRect(forBounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc override dynamic open func editingRect(forBounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc override dynamic open func placeholderRect(forBounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMChatRoomTableViewHeaderView : UIKit.UITableViewHeaderFooterView {
  open var containerView: UIKit.UIView {
    get
    set
  }
  open var label: UIKit.UILabel {
    get
    set
  }
  open var dateFormatterWithYear: Foundation.DateFormatter {
    get
    set
  }
  open var dateFormatterWithoutYear: Foundation.DateFormatter {
    get
    set
  }
  open var date: Foundation.Date? {
    get
    set
  }
  @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  open func updateUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMLinkPreview : RealmSwift.Object, IGListDiffKit.ListDiffable {
  @objc dynamic final public var title: Swift.String {
    get
  }
  @objc dynamic final public var desc: Swift.String {
    get
  }
  final public var linkURL: Foundation.URL? {
    get
    set
  }
  final public var imageURL: Foundation.URL? {
    get
    set
  }
  final public var isYoutube: Swift.Bool {
    get
    set
  }
  public init(linkString: Swift.String, imageString: Swift.String, title: Swift.String, desc: Swift.String)
  @objc required override dynamic public init()
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func ignoredProperties() -> [Swift.String]
  @objc final public func diffIdentifier() -> ObjectiveC.NSObjectProtocol
  @objc final public func isEqual(toDiffableObject object: IGListDiffKit.ListDiffable?) -> Swift.Bool
  final public func copy() -> IMLinkPreview
  @objc deinit
}
extension String {
  public func extractLinkPreviews() -> PromiseKit.Promise<[IMLinkPreview]>
}
@objc @_inheritsConvenienceInitializers open class IMFileMessageTableViewCell : IMMessageTableViewCell {
  open var iconImageView: UIKit.UIImageView {
    get
    set
  }
  open var filenameLabel: UIKit.UILabel {
    get
    set
  }
  open var detailLabel: UIKit.UILabel {
    get
    set
  }
  open var darkView: UIKit.UIView {
    get
    set
  }
  open var isCircularProgressButtonInitiated: Swift.Bool
  open var circularProgressButton: IMCircularProgressButton {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  override open func setupUI(_ reuseIdentifier: Swift.String?)
  override open func updateUI()
  @objc open func handleProgressButtonTapped(recognizer: UIKit.UITapGestureRecognizer)
  @objc override open func bubbleViewDidTap()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMFileMessageTableViewCell : IMProgressDelegate {
  open func setProgress(_ progress: Swift.Double)
  open func requestDidResponse()
}
public struct IMKit {
  public static var clientKey: Swift.String {
    get
  }
  public static var chatServerURL: Foundation.URL! {
    get
  }
  public static var bucket: Swift.String
  public static var encryptionKey: Foundation.Data?
  public static var token: Swift.String
  public static var uid: Swift.String
  public static var bundle: Foundation.Bundle? {
    get
  }
  public static var version: Swift.String? {
    get
  }
  @available(*, deprecated, renamed: "numberOfUnreadMessages")
  public static var badge: Swift.Int
  public static var numberOfUnreadMessages: Swift.Int {
    get
  }
  public static var timeoutIntervalForRequest: Swift.Double
  public static var timeoutIntervalForResource: Swift.Double
  public static var avatarHeaderField: [Swift.String : Swift.String?]
  public static var imageHeaderField: [Swift.String : Swift.String?]
  public static var customizedRequestHeaders: Alamofire.HTTPHeaders
  public static var customizedRequestEncoder: ((Foundation.Data) -> Foundation.Data)?
  public static var customizedResponseDecoder: (Foundation.Data) -> Foundation.Data
  public static var customizedSocketResponseDecoder: (Swift.String) -> Foundation.Data
  public static var avatarModifier: Kingfisher.AnyModifier
  public static var imageModifier: Kingfisher.AnyModifier
  public static var isTypingIndicatorEnabled: Swift.Bool
  public static var isReadReceiptsEnabled: Swift.Bool
  @available(*, deprecated, message: "Use forwardableMessageTypes instead")
  public static var isForwardingMessageEnabled: Swift.Bool
  public static var replyableMessageTypes: [IMMessageType]
  public static var forwardableMessageTypes: [IMMessageType]
  public static var copyableMessageTypes: [IMMessageType]
  public static var unsendableMessageTypes: [IMMessageType]
  public static var editableMessageTypes: [IMMessageType]
  public static var reportableMessageTypes: [IMMessageType]
  public static var utilities: [IMUtilityType]
  public static var applicationGroupIdentifier: Swift.String {
    get
    set
  }
  public static var realmConfig: RealmSwift.Realm.Configuration
  public static var realm: RealmSwift.Realm {
    get
  }
  public static var defaultLanguage: Swift.String
  public static var translationAPIKey: Swift.String
  public static var translationEnabledByDefault: Swift.Bool
  public static func configure(clientKey: Swift.String, chatServerURL: Foundation.URL)
  @available(swift, obsoleted: 4.1, renamed: "clear()")
  public static func logout()
  public static func clear(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  public static func checkIfRoomExists(roomID: Swift.String) -> Swift.Bool
  public static func generateDefaultRoomID(with targetUserID: Swift.String) -> Swift.String
  public static func connect(uid: Swift.String, token: Swift.String? = nil) -> PromiseKit.Promise<IMUser>
}
extension NSNotification.Name {
  public static let NumberOfUnreadMessagesDidChange: Foundation.Notification.Name
}
@objc @_inheritsConvenienceInitializers open class IMLinkPreviewTableViewCell : UIKit.UITableViewCell {
  public static var imagePlaceholder: UIKit.UIImage?
  open var verticalLine: UIKit.UIView {
    get
    set
  }
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var detailLabel: UIKit.UILabel {
    get
    set
  }
  open var previewImageView: UIKit.UIImageView {
    get
    set
  }
  open var labelBox: UIKit.UIView {
    get
    set
  }
  open var labelBoxRightConstraint: SnapKit.Constraint?
  @available(iOS 13.0, *)
  open var metadataProvider: LinkPresentation.LPMetadataProvider {
    get
    set
  }
  open var isMetadataProviderRequesting: Swift.Bool
  weak open var linkPreview: IMLinkPreview? {
    get
    set
  }
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  open func setupUI(_ reuseIdentifier: Swift.String?)
  open func updateUI()
  @available(iOS 13.0, *)
  open func setLinkPreviewImage(linkURL: Foundation.URL)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMRoomsViewController : UIObservableViewController {
  public static var searchBarEnabled: Swift.Bool
  public enum SearchBarStatus {
    case show
    case hide
    public static func == (a: IMRoomsViewController.SearchBarStatus, b: IMRoomsViewController.SearchBarStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var searchBarStatus: IMRoomsViewController.SearchBarStatus
  open var searchBarContainer: UIKit.UIView {
    get
    set
  }
  open var topStackView: UIKit.UIStackView {
    get
    set
  }
  open var searchBar: UIKit.UISearchBar {
    get
    set
  }
  open var tableView: UIKit.UITableView {
    get
    set
  }
  open var refreshControl: UIKit.UIRefreshControl {
    get
    set
  }
  open var emptyView: UIKit.UIView?
  open var folderButtonRightConstraint: SnapKit.Constraint?
  open var folderButtonBottomConstraint: SnapKit.Constraint?
  open var folderButton: UIKit.UIButton {
    get
    set
  }
  open var viewModel: IMRoomsViewModel {
    get
    set
  }
  open var floatingPanelController: FloatingPanel.FloatingPanelController {
    get
    set
  }
  public static var leftActions: [IMRoomAction]
  public static var rightActions: [IMRoomAction]
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  open func fetchRoomsIfNeeded()
  override open func applicationDidBecomeActive()
  override open func keyboardWillShow(with keyboardRect: CoreGraphics.CGRect, duration: Foundation.TimeInterval, animationCurve: Swift.UInt)
  override open func keyboardWillHide(with keyboardRect: CoreGraphics.CGRect, duration: Foundation.TimeInterval, animationCurve: Swift.UInt)
  @objc open func refreshControlPulled()
  open func emptyView(for tableView: UIKit.UITableView) -> UIKit.UIView?
  open func didSelectRoom(room: IMRoom)
  open func didSelectInvitation(invitation: IMInvitation)
  open func hideSearchBarContainer(_ hide: Swift.Bool)
  open func goRoomSearchingViewController()
  open func removeKeyboardObserver()
  open func viewModelStateDidChange(state: ViewModelState)
  open func didUpdateEmptyView()
  open func didJoin(room: IMRoom)
  open func didDecline(invitation: IMInvitation)
  @objc open func folderButtonTapped()
  @objc open func folderButtonDidPan(panGestureRecognizer: UIKit.UIPanGestureRecognizer)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMRoomsViewController : UIKit.UITableViewDelegate {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  open func transform(action: IMRoomAction, room: IMRoom, indexPath: Foundation.IndexPath) -> UIKit.UIContextualAction
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
}
extension IMRoomsViewController : UIKit.UITableViewDataSource {
  @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension IMRoomsViewController : UIKit.UITableViewDataSourcePrefetching {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, prefetchRowsAt indexPaths: [Foundation.IndexPath])
}
extension IMRoomsViewController : UIKit.UITableViewDragDelegate {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, itemsForBeginning session: UIKit.UIDragSession, at indexPath: Foundation.IndexPath) -> [UIKit.UIDragItem]
}
extension IMRoomsViewController : UIKit.UITableViewDropDelegate {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, performDropWith coordinator: UIKit.UITableViewDropCoordinator)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, dropSessionDidUpdate session: UIKit.UIDropSession, withDestinationIndexPath destinationIndexPath: Foundation.IndexPath?) -> UIKit.UITableViewDropProposal
}
extension IMRoomsViewController : IMRoomsViewModelDelegate {
  public func reloadItems(at indexPaths: [Foundation.IndexPath])
  public func deleteItems(at indexPaths: [Foundation.IndexPath])
  public func insertItems(at indexPaths: [Foundation.IndexPath])
  public func insertSections(_ sections: Foundation.IndexSet)
  public func reloadSections(_ sections: Foundation.IndexSet)
  public func deleteSections(_ sections: Foundation.IndexSet)
  public func moveSection(_ section: Swift.Int, toSection newSection: Swift.Int)
  public func reload(using changeset: DifferenceKit.StagedChangeset<[DifferenceKit.ArraySection<DifferenceKit.AnyDifferentiable, DifferenceKit.AnyDifferentiable>]>)
  public func beginRefreshing()
  public func endRefreshing()
  public func updateEmptyView()
  public func stateDidChange(state: ViewModelState)
  public func invitationAccepted(room: IMRoom)
  public func invitationDeclined(_ invitation: IMInvitation)
}
extension IMRoomsViewController : IMNetworkReachabilityManagerDelegate {
  public func networkStatusChanged(_ status: Alamofire.NetworkReachabilityManager.NetworkReachabilityStatus)
}
extension IMRoomsViewController : UIKit.UISearchBarDelegate {
  @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
}
extension IMRoomsViewController : FloatingPanel.FloatingPanelControllerDelegate {
  @objc dynamic open func floatingPanel(_ fpc: FloatingPanel.FloatingPanelController, shouldRemoveAt location: CoreGraphics.CGPoint, with velocity: CoreGraphics.CGVector) -> Swift.Bool
}
extension IMRoomsViewController : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
  @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers open class IMResponseObjectView : UIKit.UIView {
  public static var imagePlaceholder: UIKit.UIImage?
  open var avatarView: IMAvatarView {
    get
    set
  }
  open var nameLabelRightConstraint: SnapKit.Constraint?
  open var namelabel: UIKit.UILabel {
    get
    set
  }
  open var textLabelRightConstraint: SnapKit.Constraint?
  open var textlabel: IMPaddingLabel {
    get
    set
  }
  open var imageView: UIKit.UIImageView {
    get
    set
  }
  open var line: UIKit.UIView {
    get
    set
  }
  open var sender: IMUser?
  weak open var responseObject: IMResponseObject? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func prepareForReuse()
  open func updateUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMFile : RealmSwift.Object {
  @objc dynamic final public var data: Foundation.Data? {
    get
  }
  @objc dynamic final public var name: Swift.String?
  @objc dynamic final public var fileExtension: Swift.String?
  @objc dynamic final public var mimeType: Swift.String?
  @objc dynamic final public var bytes: Swift.Int
  @objc dynamic final public var duration: Swift.Int
  final public var url: Foundation.URL? {
    get
    set
  }
  final public var localPath: Foundation.URL? {
    get
  }
  final public var isLocalPathExists: Swift.Bool {
    get
  }
  final public var originalPath: Foundation.URL?
  final public var isOriginalPathExists: Swift.Bool {
    get
  }
  @objc override public static func ignoredProperties() -> [Swift.String]
  @objc required override dynamic public init()
  public init(data: Foundation.Data, name: Swift.String? = nil, mimeType: Swift.String? = nil, fileExtension: Swift.String? = nil, bytes: Swift.Int? = nil, duration: Swift.Int? = nil, originalPath: Foundation.URL? = nil)
  public init(urlString: Swift.String, name: Swift.String? = nil, mimeType: Swift.String? = nil, fileExtension: Swift.String? = nil, bytes: Swift.Int? = nil, duration: Swift.Int? = nil)
  final public func copy() -> IMFile
  final public func set(urlString: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMImageViewerViewController : UIKit.UIViewController {
  open var collectionView: UIKit.UICollectionView {
    get
    set
  }
  open var headerView: UIKit.UIView {
    get
    set
  }
  open var closeButton: UIKit.UIButton {
    get
    set
  }
  open var downloadButton: UIKit.UIButton {
    get
    set
  }
  open var senderLabel: UIKit.UILabel {
    get
    set
  }
  open var timeLabel: UIKit.UILabel {
    get
    set
  }
  open var completeView: UIKit.UIView {
    get
    set
  }
  open var selectedImage: IMImage?
  open var images: [IMImage]
  open var dateFormatter: Foundation.DateFormatter {
    get
    set
  }
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewSafeAreaInsetsDidChange()
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc open func close()
  @objc open func saveImage()
  open func setHeaderInfo(message: IMMessage)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMImageViewerViewController : UIKit.UICollectionViewDataSourcePrefetching {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, prefetchItemsAt indexPaths: [Foundation.IndexPath])
}
extension IMImageViewerViewController : UIKit.UICollectionViewDataSource {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension IMImageViewerViewController : UIKit.UICollectionViewDelegate {
  @objc dynamic open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
extension IMImageViewerViewController : IMImageViewerCollectionViewCellDelegate {
  open func dismiss()
}
final public class IMFetchRoomsTask : NetworkRequest {
  public typealias ResponseType = IMRoom
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  public static var customizedParameters: [Swift.String : Any]
  final public func perform(numberOfRoomsPerRequest: Swift.Int = 15, page: Swift.Int = 1) -> PromiseKit.Promise<[IMFetchRoomsTask.ResponseType]>
  @objc deinit
}
public protocol IGListAdapterViewModelDelagate : AnyObject {
  func performUpdates(animated: Swift.Bool)
  func performUpdates(maintainScrollPosition: Swift.Bool)
  func reloadData()
}
@objc @_inheritsConvenienceInitializers open class IMRoomViewController : UIObservableViewController {
  public static var deleteDataWhenLeaveRoom: Swift.Bool
  public static var leaveRoomEnabled: Swift.Bool
  public var roomID: Swift.String
  convenience public init(roomID: Swift.String)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLayoutSubviews()
  override public func applicationDidBecomeActive()
  override public func applicationWillResignActive()
  override public func deviceOrientationDidChange()
  public func leaveRoom()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMRoomViewController : IGListKit.ListAdapterDataSource {
  @objc dynamic public func objects(for listAdapter: IGListKit.ListAdapter) -> [IGListDiffKit.ListDiffable]
  @objc dynamic public func listAdapter(_ listAdapter: IGListKit.ListAdapter, sectionControllerFor object: Any) -> IGListKit.ListSectionController
  @objc dynamic public func emptyView(for listAdapter: IGListKit.ListAdapter) -> UIKit.UIView?
}
extension IMRoomViewController : IGListAdapterViewModelDelagate {
  public func reloadData()
  public func performUpdates(animated: Swift.Bool)
  public func performUpdates(maintainScrollPosition: Swift.Bool)
}
extension IMRoomViewController : UIKit.UICollectionViewDelegate {
}
final public class IMRoomViewModel {
  final public var state: ViewModelState {
    get
  }
  final public var data: [IGListDiffKit.ListDiffable]
  final public var roomID: Swift.String
  public init(delegate: IGListAdapterViewModelDelagate, roomID: Swift.String)
  final public func fetchRoom()
  @objc deinit
}
@objc(ColorPalette) public protocol ColorPalette {
  @objc static var lighten5: UIKit.UIColor { get }
  @objc static var lighten4: UIKit.UIColor { get }
  @objc static var lighten3: UIKit.UIColor { get }
  @objc static var lighten2: UIKit.UIColor { get }
  @objc static var lighten1: UIKit.UIColor { get }
  @objc static var base: UIKit.UIColor { get }
  @objc static var darken1: UIKit.UIColor { get }
  @objc static var darken2: UIKit.UIColor { get }
  @objc static var darken3: UIKit.UIColor { get }
  @objc static var darken4: UIKit.UIColor { get }
  @objc optional static var accent1: UIKit.UIColor { get }
  @objc optional static var accent2: UIKit.UIColor { get }
  @objc optional static var accent3: UIKit.UIColor { get }
  @objc optional static var accent4: UIKit.UIColor { get }
}
@objc @_inheritsConvenienceInitializers open class Color : UIKit.UIColor {
  @_hasMissingDesignatedInitializers open class darkText {
    public static let primary: UIKit.UIColor
    public static let secondary: UIKit.UIColor
    public static let others: UIKit.UIColor
    public static let dividers: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class lightText {
    public static let primary: UIKit.UIColor
    public static let secondary: UIKit.UIColor
    public static let others: UIKit.UIColor
    public static let dividers: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class red : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class pink : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class purple : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class deepPurple : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class indigo : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class blue : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class lightBlue : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class cyan : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class teal : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class green : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class lightGreen : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class lime : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class yellow : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class amber : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class orange : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class deepOrange : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc public static let accent1: UIKit.UIColor
    @objc public static let accent2: UIKit.UIColor
    @objc public static let accent3: UIKit.UIColor
    @objc public static let accent4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class brown : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class grey : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc deinit
  }
  @_hasMissingDesignatedInitializers open class blueGrey : ColorPalette {
    @objc public static let lighten5: UIKit.UIColor
    @objc public static let lighten4: UIKit.UIColor
    @objc public static let lighten3: UIKit.UIColor
    @objc public static let lighten2: UIKit.UIColor
    @objc public static let lighten1: UIKit.UIColor
    @objc public static let base: UIKit.UIColor
    @objc public static let darken1: UIKit.UIColor
    @objc public static let darken2: UIKit.UIColor
    @objc public static let darken3: UIKit.UIColor
    @objc public static let darken4: UIKit.UIColor
    @objc deinit
  }
  @objc override dynamic public init(white: CoreGraphics.CGFloat, alpha: CoreGraphics.CGFloat)
  @objc override dynamic public init(hue: CoreGraphics.CGFloat, saturation: CoreGraphics.CGFloat, brightness: CoreGraphics.CGFloat, alpha: CoreGraphics.CGFloat)
  @objc override dynamic public init(red: CoreGraphics.CGFloat, green: CoreGraphics.CGFloat, blue: CoreGraphics.CGFloat, alpha: CoreGraphics.CGFloat)
  @available(iOS 10.0, *)
  @objc override dynamic public init(displayP3Red: CoreGraphics.CGFloat, green: CoreGraphics.CGFloat, blue: CoreGraphics.CGFloat, alpha: CoreGraphics.CGFloat)
  @objc override dynamic public init(cgColor: CoreGraphics.CGColor)
  @objc override dynamic public init(patternImage image: UIKit.UIImage)
  @available(iOS 5.0, *)
  @objc override dynamic public init(ciColor: CoreImage.CIColor)
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(iOS 13.0, *)
  @objc override dynamic public init(dynamicProvider: @escaping (UIKit.UITraitCollection) -> UIKit.UIColor)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMMapMessageCollectionViewCell : IMMessageCollectionViewCell {
  @objc override dynamic public func prepareForReuse()
  override public func updateUI()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMMapMessageCollectionViewCellIncoming : IMMapMessageCollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMMapMessageCollectionViewCellOutgoing : IMMapMessageCollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
final public class IMUpdateRoomGroupsTask : NetworkRequest {
  public typealias ResponseType = IMRoomGroup
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var encoding: Alamofire.ParameterEncoding {
    get
  }
  final public var httpBody: Foundation.Data? {
    get
  }
  final public func perform(roomGroups: [IMRoomGroup]) -> PromiseKit.Promise<[IMUpdateRoomGroupsTask.ResponseType]>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMForwardingMessagesViewController : UIKit.UIViewController {
  open var collectionView: UIKit.UICollectionView {
    get
    set
  }
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMForwardingMessagesViewController : UIKit.UICollectionViewDataSource {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension IMForwardingMessagesViewController : UIKit.UICollectionViewDelegate {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension IMForwardingMessagesViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
extension IMForwardingMessagesViewController : IMForwardingMessagesViewModelDelegate {
  public func insertItems(at indexPaths: [Foundation.IndexPath])
  public func reloadItems(at indexPaths: [Foundation.IndexPath])
  public func moveItem(at indexPath: Foundation.IndexPath, to newIndexPath: Foundation.IndexPath)
}
public protocol IMForwardingMessagesViewModelDelegate : AnyObject {
  func insertItems(at indexPaths: [Foundation.IndexPath])
  func reloadItems(at indexPaths: [Foundation.IndexPath])
  func moveItem(at indexPath: Foundation.IndexPath, to newIndexPath: Foundation.IndexPath)
}
@_hasMissingDesignatedInitializers open class IMForwardingMessagesViewModel {
  public var data: [Swift.LazyFilterSequence<Swift.LazyMapSequence<RealmSwift.Results<IMRoom>, IMRoom>>.Element]
  public var selectedRoomIDs: [Swift.String]
  @objc deinit
}
extension IMForwardingMessagesViewModel : IMRoomsManagerDelegate {
  public func roomDidUpdate(room: IMRoom)
}
@objc @_inheritsConvenienceInitializers public class IMForwardingMessagesCollectionViewCell : UIKit.UICollectionViewCell {
  public var checkBoxImageView: UIKit.UIImageView {
    get
    set
  }
  public var detailLabel: UIKit.UILabel {
    get
    set
  }
  weak public var room: IMRoom? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForReuse()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMSystemMessageTableViewCell : IMMessageTableViewCell {
  open var label: IMPaddingLabel {
    get
    set
  }
  open var mainDateFormatter: Foundation.DateFormatter {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  override open func setupUI(_ reuseIdentifier: Swift.String?)
  override open func updateUI()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMDisableInputAccessoryViewController : UIKit.UIInputViewController {
  open var imageView: UIKit.UIImageView {
    get
    set
  }
  open var label: UIKit.UILabel {
    get
    set
  }
  open var safeAreaInsets: UIKit.UIEdgeInsets
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewSafeAreaInsetsDidChange()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMImageCarouselTemplateTableViewCell : IMMessageTableViewCell {
  open var collectionView: UIKit.UICollectionView {
    get
    set
  }
  override open func setupUI(_ reuseIdentifier: Swift.String?)
  override open func updateUI()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMImageCarouselTemplateTableViewCell : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
extension IMImageCarouselTemplateTableViewCell : UIKit.UICollectionViewDataSource {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
final public class IMCancelInvitationTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(roomID: Swift.String, invitees: [Swift.String]) -> PromiseKit.Promise<IMCancelInvitationTask.ResponseType>
  @objc deinit
}
public protocol IMRoomsViewModelDelegate : AnyObject {
  func reloadItems(at indexPaths: [Foundation.IndexPath])
  func deleteItems(at indexPaths: [Foundation.IndexPath])
  func insertItems(at indexPaths: [Foundation.IndexPath])
  func insertSections(_ sections: Foundation.IndexSet)
  func reloadSections(_ sections: Foundation.IndexSet)
  func deleteSections(_ sections: Foundation.IndexSet)
  func moveSection(_ section: Swift.Int, toSection newSection: Swift.Int)
  func reload(using changeset: DifferenceKit.StagedChangeset<[DifferenceKit.ArraySection<DifferenceKit.AnyDifferentiable, DifferenceKit.AnyDifferentiable>]>)
  func beginRefreshing()
  func endRefreshing()
  func updateEmptyView()
  func stateDidChange(state: ViewModelState)
  func invitationAccepted(room: IMRoom)
  func invitationDeclined(_ invitation: IMInvitation)
}
public enum ViewModelState : Swift.Equatable {
  case loading
  case loaded
  case fullyLoaded
  case initial
  case error(Swift.Error)
  public static func == (lhs: ViewModelState, rhs: ViewModelState) -> Swift.Bool
}
open class IMRoomsViewModel {
  public var state: ViewModelState {
    get
  }
  public var sections: [DifferenceKit.ArraySection<DifferenceKit.AnyDifferentiable, DifferenceKit.AnyDifferentiable>]
  public var sectionsInput: [DifferenceKit.ArraySection<DifferenceKit.AnyDifferentiable, DifferenceKit.AnyDifferentiable>] {
    get
    set
  }
  public var expandedGroupIDs: [Swift.String]
  public var roomPredicate: Foundation.NSPredicate?
  public var roomGroupPredicate: Foundation.NSPredicate?
  public var invitationPredicate: Foundation.NSPredicate?
  public var roomTag: Swift.String?
  public var isEmpty: Swift.Bool {
    get
  }
  public init(delegate: IMRoomsViewModelDelegate)
  public var isFiltering: Swift.Bool {
    get
  }
  public func fetchRoomsFromLocal()
  public func fetchRooms()
  public func loadrooms()
  public func toggleRoomMute(room: IMRoom)
  public func accept(invitation: IMInvitation)
  public func decline(invitation: IMInvitation)
  @objc deinit
}
extension IMRoomsViewModel : IMRoomsManagerDelegate {
  public func roomDidUpdate(room: IMRoom)
  public func roomsDidUpdate(rooms: [IMRoom])
  public func roomDidDelete(roomID: Swift.String)
  public func invitationDidUpdate(invitation: IMInvitation)
  public func invitationDidCancel(invitation: IMInvitation)
  public func roomGroupDidUpdate(roomGroup: IMRoomGroup)
  public func roomGroupsDidUpdate(roomGroups: [IMRoomGroup])
  public func roomGroupDidDelete(roomGroupID: Swift.String)
}
public protocol IMMessageCellDelegate : AnyObject {
  func cellDidTapped()
  func cellDidLeftSwipe(recognizer: UIKit.UISwipeGestureRecognizer?)
  func cellDidLongPressed(recognizer: UIKit.UILongPressGestureRecognizer?)
  func retryButtonDidTapped()
  func checkboxDidTapped()
  func responseViewDidTap()
  func avatarDidTapped()
  func didTapReport(_ message: IMMessage)
  func customizedUsername(_ message: IMMessage) -> Swift.String?
  func customizedUserAvatarURL(_ message: IMMessage) -> Foundation.URL?
}
public protocol IMMessageSectionController {
  var message: IMMessage? { get set }
}
extension IMMessageCellDelegate where Self : IGListKit.ListSectionController {
  public func cellDidTapped()
  public func retryButtonDidTapped()
  public func responseViewDidTap()
  public func customizedUsername(_ message: IMMessage) -> Swift.String?
  public func customizedUserAvatarURL(_ message: IMMessage) -> Foundation.URL?
}
extension IMMessageCellDelegate where Self : IGListKit.ListSectionController, Self : IMMessageSectionController {
  public func cellDidLongPressed(recognizer: UIKit.UILongPressGestureRecognizer? = nil)
  public func cellDidLeftSwipe(recognizer: UIKit.UISwipeGestureRecognizer? = nil)
  public func didTapReplyAction(message: IMMessage, viewController: UIKit.UIViewController?)
  public func didTapForwardAction(message: IMMessage, viewController: UIKit.UIViewController?)
  public func didTapCopyAction(message: IMMessage, viewController: UIKit.UIViewController?)
  public func didTapUnsendAction(message: IMMessage, viewController: UIKit.UIViewController?)
  public func didTapEditAction(message: IMMessage, viewController: UIKit.UIViewController?)
  public func didTapReportAction(message: IMMessage, viewController: UIKit.UIViewController?)
  public func checkboxDidTapped()
  public func avatarDidTapped()
  public func didTapReport(_ message: IMMessage)
}
@objc @_inheritsConvenienceInitializers public class IMImageMessageCollectionViewCell : IMMessageCollectionViewCell, IMProgressDelegate {
  public static var imagePlaceholder: UIKit.UIImage?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForReuse()
  override public func updateUI()
  public func setProgress(_ progress: Swift.Double)
  @objc public func handleProgressButtonTapped(recognizer: UIKit.UITapGestureRecognizer)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMImageMessageCollectionViewCellIncoming : IMImageMessageCollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMImageMessageCollectionViewCellOutgoing : IMImageMessageCollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public enum IMKeyboardType {
  case system
  case sticker
  case audio
  case utility
  case template
  case photo
  public static func == (a: IMKeyboardType, b: IMKeyboardType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol IMImagePickerControllerDelegate : AnyObject {
  func imagePickerController(_ picker: UIKit.UIViewController, didFinishPickingImages images: [UIKit.UIImage])
  func imagePickerController(_ picker: UIKit.UIViewController, didFinishPickingAssets assets: [Photos.PHAsset])
  func imagePickerControllerDidCancel(_ picker: UIKit.UIViewController)
}
@objc @_inheritsConvenienceInitializers open class IMInputAccessoryViewController : UIKit.UIInputViewController {
  public typealias Style = IMStyle.messages.inputAccessory
  open var keyboardType: IMKeyboardType {
    get
    set
  }
  open var primaryViewTopConstraint: SnapKit.Constraint?
  open var primaryViewBottomConstraint: SnapKit.Constraint?
  open var primaryView: UIKit.UIView {
    get
    set
  }
  open var line: UIKit.UIView {
    get
    set
  }
  open var isTextBarExpanded: Swift.Bool
  open var textBar: UIKit.UIView {
    get
    set
  }
  open var textBarLeftConstraint: SnapKit.Constraint?
  open var textView: UIKit.UITextView {
    get
    set
  }
  open var stickerTextView: UIKit.UITextView {
    get
    set
  }
  open var photoTextView: UIKit.UITextView {
    get
    set
  }
  open var audioTextView: UIKit.UITextView {
    get
    set
  }
  open var utilityTextView: UIKit.UITextView {
    get
    set
  }
  open var templateTextView: UIKit.UITextView {
    get
    set
  }
  open var sendButton: UIKit.UIButton {
    get
    set
  }
  open var audioButton: UIKit.UIButton {
    get
    set
  }
  open var imageButton: UIKit.UIButton {
    get
    set
  }
  open var cameraButton: UIKit.UIButton {
    get
    set
  }
  open var fileButton: UIKit.UIButton {
    get
    set
  }
  open var mapButton: UIKit.UIButton {
    get
    set
  }
  open var returnButton: UIKit.UIButton {
    get
    set
  }
  open var addButton: UIKit.UIButton {
    get
    set
  }
  open var stickerButton: UIKit.UIButton {
    get
    set
  }
  open var imagePicker: UIKit.UIImagePickerController {
    get
    set
  }
  open var cameraImagePicker: UIKit.UIViewController?
  open var photosImagePicker: UIKit.UIViewController?
  open var documentPicker: UIKit.UIDocumentPickerViewController {
    get
    set
  }
  open var responseObjectInputAccessoryViewHeight: CoreGraphics.CGFloat {
    get
  }
  open var responseObjectInputAccessoryView: IMResponseObjectInputAccessoryView {
    get
    set
  }
  weak open var viewController: UIKit.UIViewController?
  open var roomID: Swift.String
  open var responseObject: IMResponseObject? {
    get
    set
  }
  open var customViewTopConstraint: SnapKit.Constraint?
  open var customView: UIKit.UIView? {
    get
    set
  }
  open var textViewHight: CoreGraphics.CGFloat {
    get
    set
  }
  open var safeAreaInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  public var selectedPhotosCount: Swift.Int? {
    get
    set
  }
  public func resizeViewFrame()
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewSafeAreaInsetsDidChange()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc public func imageButtonTapped()
  @objc open func cameraButtonTapped()
  open func presentImagePicker(_ sourceType: UIKit.UIImagePickerController.SourceType)
  open func resignAllFirstResponder()
  @objc open func sendButtonTapped()
  @objc open func stickerButtonTapped()
  @objc open func audioButtonTapped()
  @objc open func fileButtonTapped()
  @objc open func mapButtonTapped()
  @objc open func addButtonTapped()
  @objc open func returnButtonTapped()
  @objc public func sendImagesButtonTapped()
  @objc public func dismissPhotoButtonTapped()
  open func setTextViewSize()
  final public let stackView: UIKit.UIStackView
  open func layoutUI()
  open func expandTextBar()
  @objc open func foldTextBar()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMInputAccessoryViewController : UIKit.UITextViewDelegate {
  @objc dynamic open func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @objc dynamic open func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @objc dynamic open func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @objc dynamic open func textViewDidChange(_ textView: UIKit.UITextView)
}
extension IMInputAccessoryViewController : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc dynamic open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension IMInputAccessoryViewController : IMImagePickerControllerDelegate {
  open func imagePickerController(_ picker: UIKit.UIViewController, didFinishPickingImages images: [UIKit.UIImage])
  open func imagePickerController(_ picker: UIKit.UIViewController, didFinishPickingAssets assets: [Photos.PHAsset])
  open func imagePickerControllerDidCancel(_ picker: UIKit.UIViewController)
}
extension IMInputAccessoryViewController : UIKit.UIDocumentPickerDelegate {
  @objc dynamic open func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @objc dynamic open func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentAt url: Foundation.URL)
}
extension IMInputAccessoryViewController : IMPhotoInputViewControllerDelegate {
  public func didUpdateSelectedAssets(_ selectedAssets: [Photos.PHAsset])
}
@objc @_inheritsConvenienceInitializers open class IMImageCarouselTemplateSectionController : IGListKit.ListSectionController, IMMessageSectionController, IMMessageCellDelegate {
  weak public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMStickersCollectionViewCell : UIKit.UICollectionViewCell {
  weak final public var viewController: UIKit.UIViewController?
  final public var stickerSet: IMStickerSet? {
    get
    set
  }
  @objc override final public func prepareForReuse()
  final public func invalidateLayout()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMStickersCollectionViewCell : UIKit.UICollectionViewDelegate {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension IMStickersCollectionViewCell : UIKit.UICollectionViewDataSource {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension IMStickersCollectionViewCell : UIKit.UICollectionViewDelegateFlowLayout {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
@objc @_inheritsConvenienceInitializers open class IMStickerMessageSectionController : IGListKit.ListSectionController, IMMessageSectionController {
  weak public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
extension IMStickerMessageSectionController : IMMessageCellDelegate {
  public func cellDidTapped()
}
@_inheritsConvenienceInitializers public class IMMoyaProvider<Target> : Moya.MoyaProvider<Target> where Target : Moya.TargetType {
  override public init(endpointClosure: @escaping Moya.MoyaProvider<Target>.EndpointClosure = super, requestClosure: @escaping Moya.MoyaProvider<Target>.RequestClosure = super, stubClosure: @escaping Moya.MoyaProvider<Target>.StubClosure = super, callbackQueue: Dispatch.DispatchQueue? = super, session: Moya.Session = super, plugins: [Moya.PluginType] = super, trackInflights: Swift.Bool = super)
  @objc deinit
}
public enum IMService {
  case uploadFile(data: Foundation.Data, mimeType: Swift.String)
  case downloadFile(url: Foundation.URL, localPath: Foundation.URL)
}
public protocol IMTargetType : Moya.TargetType {
  associatedtype ResponseType
  func parse(_ response: Moya.Response) -> PromiseKit.Promise<Self.ResponseType>
}
extension IMService : IMTargetType {
  public typealias ResponseType = Foundation.URL
  public var baseURL: Foundation.URL {
    get
  }
  public var path: Swift.String {
    get
  }
  public var method: Moya.Method {
    get
  }
  public var sampleData: Foundation.Data {
    get
  }
  public var task: Moya.Task {
    get
  }
  public var headers: [Swift.String : Swift.String]? {
    get
  }
  public func parse(_ response: Moya.Response) -> PromiseKit.Promise<IMService.ResponseType>
}
public typealias IMMessageActionItem = (title: Swift.String, image: UIKit.UIImage?)
public enum IMMessageActionType {
  case sheet
  case popover
  case menu
  public static func == (a: IMMessageActionType, b: IMMessageActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum IMMessageAction : Swift.String, Swift.CaseIterable {
  case reply
  case forward
  case copy
  case unsend
  case edit
  case report
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IMMessageAction]
  public typealias RawValue = Swift.String
  public static var allCases: [IMMessageAction] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class IMMessageActionPopoverViewController : UIKit.UIViewController {
  public static var actionImages: [IMMessageAction : UIKit.UIImage?]
  public var actionItems: [IMMessageActionItem]
  public var maskView: UIKit.UIView {
    get
    set
  }
  convenience public init?(message: IMMessage, sourceView: UIKit.UIView, didSelectItem: ((Swift.String) -> ())?)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMMessageActionPopoverViewController : UIKit.UIPopoverPresentationControllerDelegate {
  @objc dynamic public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController) -> UIKit.UIModalPresentationStyle
}
extension IMMessageActionPopoverViewController : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension IMMessageActionPopoverViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc @_inheritsConvenienceInitializers open class IMLinkPreviewCollectionViewCell : UIKit.UICollectionViewCell {
  public static var imagePlaceholder: UIKit.UIImage?
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var detailLabel: UIKit.UILabel {
    get
    set
  }
  weak public var linkPreview: IMLinkPreview? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForReuse()
  @objc deinit
}
public protocol IMMessageTableViewCellDelegate : AnyObject {
  func mentionDidTap(user: IMUser)
  func imageDidTap(image: IMImage)
}
@objc @_inheritsConvenienceInitializers open class IMMessageTableViewCell : UIKit.UITableViewCell {
  open var bubbleView: UIKit.UIView {
    get
    set
  }
  open var bubbleViewTopConstraint: SnapKit.Constraint?
  open var bubbleViewBottomConstraint: SnapKit.Constraint?
  open var bubbleViewMaxWidthConstraint: SnapKit.Constraint?
  open var tapGestureRecognizer: UIKit.UITapGestureRecognizer {
    get
    set
  }
  open var longPressGestureRecognizer: UIKit.UILongPressGestureRecognizer {
    get
    set
  }
  open var nameLabel: UIKit.UILabel {
    get
    set
  }
  open var nameLabelTopConstraint: SnapKit.Constraint?
  open var timeLabel: UIKit.UILabel {
    get
    set
  }
  open var readReceiptLabel: UIKit.UILabel {
    get
    set
  }
  open var dateFormatter: Foundation.DateFormatter {
    get
    set
  }
  open var avatarView: IMAvatarView {
    get
    set
  }
  open var avatarViewLeftConstraint: SnapKit.Constraint?
  open var checkBoxButton: UIKit.UIButton {
    get
    set
  }
  open var isCheckboxInitiated: Swift.Bool
  open var sendingIndicator: UIKit.UIImageView {
    get
    set
  }
  open var isRetrybuttonInitiated: Swift.Bool
  open var retryButton: UIKit.UIButton {
    get
    set
  }
  open var message: IMMessage? {
    get
    set
  }
  weak open var delegate: IMMessageTableViewCellDelegate?
  weak open var viewController: UIKit.UIViewController?
  public var isIncomingMessage: Swift.Bool {
    get
  }
  public var isOutgoingMessage: Swift.Bool {
    get
  }
  open var actionsViewController: UIKit.UIViewController?
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  open func setupUI(_ reuseIdentifier: Swift.String?)
  open func updateUI()
  open func updateUIForMessageSelection()
  @objc open func bubbleViewDidTap()
  @objc open func bubbleViewDidLongPress()
  @objc open func checkBoxButtonDidTap()
  @objc open func retryButtonDidTap()
  @objc deinit
}
extension IMMessageTableViewCell : UIKit.UIPopoverPresentationControllerDelegate {
  @objc dynamic open func adaptivePresentationStyle(for controller: UIKit.UIPresentationController) -> UIKit.UIModalPresentationStyle
}
@objc @_inheritsConvenienceInitializers final public class IMStickerTabCollectionViewCell : UIKit.UICollectionViewCell {
  final public var imageView: UIKit.UIImageView {
    get
    set
  }
  final public var stickerID: Swift.String? {
    get
    set
  }
  final public var isTabSelected: Swift.Bool {
    get
    set
  }
  @objc override final public func prepareForReuse()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMStickerMessageTableViewCell : IMMessageTableViewCell {
  public static var imagePlaceholder: UIKit.UIImage?
  open var mainImageView: UIKit.UIImageView {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  override open func setupUI(_ reuseIdentifier: Swift.String?)
  override open func updateUI()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class IMCreateDirectChatTask : NetworkRequest {
  public typealias ResponseType = IMRoom
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(roomID: Swift.String? = nil, roomName: Swift.String? = nil, coverURL: Foundation.URL? = nil, description: Swift.String? = nil, invitee: Swift.String, isSystemMessageEnabled: Swift.Bool = false) -> PromiseKit.Promise<IMCreateDirectChatTask.ResponseType>
  @objc deinit
}
public protocol IMImageViewerCollectionViewCellDelegate : AnyObject {
  func dismiss()
}
@objc @_inheritsConvenienceInitializers open class IMImageViewerCollectionViewCell : UIKit.UICollectionViewCell {
  open var imageView: UIKit.UIImageView {
    get
    set
  }
  weak public var delegate: IMImageViewerCollectionViewCellDelegate?
  weak public var image: IMImage? {
    get
    set
  }
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public func prepareForReuse()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMImageViewerCollectionViewCell : UIKit.UIScrollViewDelegate {
  @objc dynamic public func viewForZooming(in scrollView: UIKit.UIScrollView) -> UIKit.UIView?
  @objc dynamic public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
}
@objc @_inheritsConvenienceInitializers open class IMFileViewerViewController : QuickLook.QLPreviewController {
  open var message: IMMessage?
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMFileViewerViewController : QuickLook.QLPreviewControllerDataSource {
  @objc dynamic public func numberOfPreviewItems(in controller: QuickLook.QLPreviewController) -> Swift.Int
  @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, previewItemAt index: Swift.Int) -> QuickLook.QLPreviewItem
}
extension IMFileViewerViewController : QuickLook.QLPreviewControllerDelegate {
  @objc dynamic public func previewController(_ controller: QuickLook.QLPreviewController, shouldOpen url: Foundation.URL, for item: QuickLook.QLPreviewItem) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class IMTextMessageSectionController : IGListKit.ListSectionController, IMMessageSectionController {
  public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
extension IMTextMessageSectionController : IGListKit.ListAdapterDataSource {
  @objc dynamic public func objects(for listAdapter: IGListKit.ListAdapter) -> [IGListDiffKit.ListDiffable]
  @objc dynamic public func listAdapter(_ listAdapter: IGListKit.ListAdapter, sectionControllerFor object: Any) -> IGListKit.ListSectionController
  @objc dynamic public func emptyView(for listAdapter: IGListKit.ListAdapter) -> UIKit.UIView?
}
extension IMTextMessageSectionController : IMMessageCellDelegate {
  public func cellDidTapped()
  public func responseViewDidTap()
  public func checkboxDidTapped()
}
extension String {
  public func height(withConstrainedWidth width: CoreGraphics.CGFloat, font: UIKit.UIFont) -> CoreGraphics.CGFloat
  public func width(withConstrainedHeight height: CoreGraphics.CGFloat, font: UIKit.UIFont) -> CoreGraphics.CGFloat
}
extension ListSectionController {
  public func resignKeyboard()
  public func messageDidSelect(message: IMMessage)
}
@objc @_inheritsConvenienceInitializers open class IMFileMessageSectionController : IGListKit.ListSectionController, IMMessageSectionController {
  weak public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
extension IMFileMessageSectionController : IMMessageCellDelegate {
  public func cellDidTapped()
}
@objc @_inheritsConvenienceInitializers open class IMMapMessageSectionController : IGListKit.ListSectionController, IMMessageSectionController {
  weak public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
extension IMMapMessageSectionController : IMMessageCellDelegate {
  public func cellDidTapped()
}
@objc @_inheritsConvenienceInitializers open class IMCachingImageManager : Photos.PHCachingImageManager {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMImagesMessageTableViewCell : IMMessageTableViewCell {
  open var collectionView: UIKit.UICollectionView {
    get
    set
  }
  override open func setupUI(_ reuseIdentifier: Swift.String?)
  override open func updateUI()
  @objc override open func bubbleViewDidLongPress()
  @objc override open func checkBoxButtonDidTap()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMImagesMessageTableViewCell : UIKit.UICollectionViewDelegate {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension IMImagesMessageTableViewCell : UIKit.UICollectionViewDataSource {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension IMImagesMessageTableViewCell : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
@objc @_inheritsConvenienceInitializers open class IMImagesMessageCollectionViewCell : UIKit.UICollectionViewCell {
  open var imageView: UIKit.UIImageView {
    get
    set
  }
  open var isCircularProgressButtonInitiated: Swift.Bool
  open var circularProgressButton: IMCircularProgressButton {
    get
    set
  }
  open var darkView: UIKit.UIView {
    get
    set
  }
  open var checkBoxButton: UIKit.UIButton {
    get
    set
  }
  open var isCheckboxInitiated: Swift.Bool
  weak open var message: IMMessage?
  open var image: IMImage? {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  open func updateUI()
  open func updateUIForMessageSelection()
  @objc open func handleProgressButtonTapped(recognizer: UIKit.UITapGestureRecognizer)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMImagesMessageCollectionViewCell : IMProgressDelegate {
  open func setProgress(_ progress: Swift.Double)
  open func requestDidResponse()
}
final public class IMFetchRoomInvitationsTask : NetworkRequest {
  public typealias ResponseType = IMPendingInvitation
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public func perform(roomID: Swift.String) -> PromiseKit.Promise<[IMFetchRoomInvitationsTask.ResponseType]>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMVideoMessageTableViewCell : IMMessageTableViewCell {
  open var bubbleViewWidthConstraint: SnapKit.Constraint?
  open var mainImageView: UIKit.UIImageView {
    get
    set
  }
  open var isCircularProgressButtonInitiated: Swift.Bool
  open var circularProgressButton: IMCircularProgressButton {
    get
    set
  }
  open var darkView: UIKit.UIView {
    get
    set
  }
  open var playButton: UIKit.UIButton {
    get
    set
  }
  open var durationLabel: UIKit.UILabel {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  override open func setupUI(_ reuseIdentifier: Swift.String?)
  override open func updateUI()
  @objc open func handleProgressButtonTapped(recognizer: UIKit.UITapGestureRecognizer)
  @objc override open func bubbleViewDidTap()
  open func presentAVPlayer(localPath: Foundation.URL)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMVideoMessageTableViewCell : IMProgressDelegate {
  open func setProgress(_ progress: Swift.Double)
}
final public class IMUnmuteRoomTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public func perform(id: Swift.String) -> PromiseKit.Promise<IMUnmuteRoomTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMStickerPreviewView : UIKit.UIView {
  open var stickerButton: UIKit.UIButton {
    get
    set
  }
  open var closeButton: UIKit.UIButton {
    get
    set
  }
  weak open var message: IMMessage? {
    get
    set
  }
  weak open var viewController: UIKit.UIViewController?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func updateUI()
  @objc open func close()
  @objc open func send()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMCarouselTemplateSectionController : IGListKit.ListSectionController, IMMessageSectionController {
  weak public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
extension IMCarouselTemplateSectionController : IMMessageCellDelegate {
  open func cellDidTapped()
}
final public class IMMuteRoomTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public func perform(id: Swift.String) -> PromiseKit.Promise<IMMuteRoomTask.ResponseType>
  @objc deinit
}
final public class IMFetchMessagesTask : NetworkRequest {
  public typealias ResponseType = (Swift.Int, [IMMessage])
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(with roomID: Swift.String, numberOfMessagesPerRequest: Swift.Int? = nil, before messageID: Swift.String? = nil) -> PromiseKit.Promise<IMFetchMessagesTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMMapViewController : UIKit.UIViewController {
  open var coordinate: CoreLocation.CLLocationCoordinate2D?
  open var closeButton: UIKit.UIButton {
    get
    set
  }
  open var mapView: MapKit.MKMapView {
    get
    set
  }
  open var annotation: MapKit.MKPointAnnotation {
    get
    set
  }
  open var locationManager: CoreLocation.CLLocationManager {
    get
    set
  }
  open var hasLoadedLocation: Swift.Bool
  @objc override dynamic open func viewDidLoad()
  @objc open func close()
  @objc open func send()
  open func fetchAddress(coordinate: CoreLocation.CLLocationCoordinate2D) -> PromiseKit.Promise<Swift.String>
  open func updateAnnotation(coordinate: CoreLocation.CLLocationCoordinate2D)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMMapViewController : MapKit.MKMapViewDelegate {
  @objc dynamic open func mapView(_ mapView: MapKit.MKMapView, regionWillChangeAnimated animated: Swift.Bool)
  @objc dynamic open func mapView(_ mapView: MapKit.MKMapView, regionDidChangeAnimated animated: Swift.Bool)
  @objc dynamic open func mapView(_ mapView: MapKit.MKMapView, didSelect view: MapKit.MKAnnotationView)
}
extension IMMapViewController : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic open func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic open func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: Swift.Error)
}
public enum IMSystemEventType {
  case JoinRoom
  case LeaveRoom
  case AddMember
  case AddMembers
  case DeleteMember
  case UnsendMessage
  case CancelInvitations
  case Announcement
  public static func == (a: IMSystemEventType, b: IMSystemEventType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class IMSystemEvent : RealmSwift.Object {
  final public let members: RealmSwift.List<IMLiteUser>
  final public var type: IMSystemEventType {
    get
    set
  }
  @objc override public static func ignoredProperties() -> [Swift.String]
  public init(systemEventType: Swift.String, members: [IMLiteUser] = [])
  @objc required override dynamic public init()
  final public func copy() -> IMSystemEvent
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMVideoMessageSectionController : IGListKit.ListSectionController, IMMessageSectionController {
  weak public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
extension IMVideoMessageSectionController : IMMessageCellDelegate {
  public func cellDidTapped()
}
final public class IMUnsubscribeTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(type: Swift.String = "fcm") -> PromiseKit.Promise<IMUnsubscribeTask.ResponseType>
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class IMDate : IGListDiffKit.ListDiffable {
  final public let value: Foundation.Date
  @objc final public func diffIdentifier() -> ObjectiveC.NSObjectProtocol
  @objc final public func isEqual(toDiffableObject object: IGListDiffKit.ListDiffable?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class UIObservableViewController : UIKit.UIViewController {
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  open func keyboardWillShow(with keyboardRect: CoreGraphics.CGRect, duration: Foundation.TimeInterval, animationCurve: Swift.UInt)
  open func keyboardWillHide(with keyboardRect: CoreGraphics.CGRect, duration: Foundation.TimeInterval, animationCurve: Swift.UInt)
  open func keyboardWillChangeFrame(with keyboardRect: CoreGraphics.CGRect, duration: Foundation.TimeInterval, animationCurve: Swift.UInt)
  open func applicationWillResignActive()
  open func applicationDidBecomeActive()
  open func deviceOrientationDidChange()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMLocationMessageTableViewCell : IMMessageTableViewCell {
  open var mapView: MapKit.MKMapView {
    get
    set
  }
  open var annotation: MapKit.MKPointAnnotation {
    get
    set
  }
  open var label: UIKit.UILabel {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  override open func setupUI(_ reuseIdentifier: Swift.String?)
  override open func updateUI()
  @objc override open func bubbleViewDidTap()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMTextMessageResponseView : UIKit.UIView {
  public static var imagePlaceholder: UIKit.UIImage?
  open var avatarView: IMAvatarView {
    get
    set
  }
  open var nameLabelRightConstraint: SnapKit.Constraint?
  open var namelabel: UIKit.UILabel {
    get
    set
  }
  open var textlabel: UIKit.UILabel {
    get
    set
  }
  open var imageView: UIKit.UIImageView {
    get
    set
  }
  open var separator: UIKit.UIView {
    get
    set
  }
  weak open var responseObject: IMResponseObject? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func prepareForReuse()
  open func setupUI(_ reuseIdentifier: Swift.String?)
  open func updateUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMImageMessageSectionController : IGListKit.ListSectionController, IMMessageSectionController {
  weak public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
extension IMImageMessageSectionController : IMMessageCellDelegate {
  public func cellDidTapped()
}
@objc @_inheritsConvenienceInitializers public class IMTextMessageCollectionViewCell : IMMessageCollectionViewCell {
  public static var urlTapHandler: ((Foundation.URL) -> ())?
  public var textLabel: ActiveLabel {
    get
    set
  }
  open var responseTapGestureRecognizer: UIKit.UITapGestureRecognizer {
    get
    set
  }
  public var collectionView: IGListKit.ListCollectionView {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForReuse()
  override public func updateUI()
  @objc open func handleResponseTapFrom(recognizer: UIKit.UITapGestureRecognizer)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMTextMessageCollectionViewCellIncoming : IMTextMessageCollectionViewCell {
  public var translatedTextLabel: UIKit.UILabel {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForReuse()
  override public func updateUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMTextMessageWithResponseObjectCollectionViewCellIncoming : IMTextMessageCollectionViewCellIncoming {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForReuse()
  override public func updateUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMTextMessageWithLinkPreviewCollectionViewCellIncoming : IMTextMessageCollectionViewCellIncoming {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMTextMessageWithLinkPreviewAndResponseObjectCollectionViewCellIncoming : IMTextMessageWithLinkPreviewCollectionViewCellIncoming {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForReuse()
  override public func updateUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMTextMessageCollectionViewCellOutgoing : IMTextMessageCollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override public func updateUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMTextMessageWithResponseObjectCollectionViewCellOutgoing : IMTextMessageCollectionViewCellOutgoing {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForReuse()
  override public func updateUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMTextMessageWithLinkPreviewCollectionViewCellOutgoing : IMTextMessageCollectionViewCellOutgoing {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMTextMessageWithLinkPreviewAndResponseObjectCollectionViewCellOutgoing : IMTextMessageWithLinkPreviewCollectionViewCellOutgoing {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForReuse()
  override public func updateUI()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMTypingSectionController : IGListKit.ListSectionController {
  @objc override final public func numberOfItems() -> Swift.Int
  @objc override final public func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override final public func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override final public func didUpdate(to object: Any)
  @objc override final public func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMTypingCollectionViewCell : UIKit.UICollectionViewCell {
  final public var text: Swift.String? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMRoomSearchingViewController : UIObservableViewController {
  public static var messagesViewControllerType: IMMessagesViewController.Type?
  public enum Mode {
    case history
    case result
    public static func == (a: IMRoomSearchingViewController.Mode, b: IMRoomSearchingViewController.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var customizedEmptyText: ((IMRoomSearchingViewController.Mode) -> Swift.String?)?
  @objc deinit
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  public func didSelect(room: IMRoom)
  override open func keyboardWillShow(with keyboardRect: CoreGraphics.CGRect, duration: Foundation.TimeInterval, animationCurve: Swift.UInt)
  override open func keyboardWillHide(with keyboardRect: CoreGraphics.CGRect, duration: Foundation.TimeInterval, animationCurve: Swift.UInt)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension IMRoomSearchingViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension IMRoomSearchingViewController : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers final public class IMLocation : RealmSwift.Object {
  @objc dynamic final public var address: Swift.String {
    get
  }
  @objc dynamic final public var latitude: Swift.Double {
    get
  }
  @objc dynamic final public var longitude: Swift.Double {
    get
  }
  final public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
    set
  }
  @objc required override dynamic public init()
  @objc override public static func ignoredProperties() -> [Swift.String]
  public init(address: Swift.String?, latitude: Swift.Double, longitude: Swift.Double)
  final public func copy() -> IMLocation
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IMAudioMessageCollectionViewCell : IMMessageCollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
  @objc override dynamic public func prepareForReuse()
  override public func updateUI()
  @objc override dynamic public func removeFromSuperview()
}
@objc @_inheritsConvenienceInitializers public class IMAudioMessageCollectionViewCellIncoming : IMAudioMessageCollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMAudioMessageCollectionViewCellOutgoing : IMAudioMessageCollectionViewCell, IMProgressDelegate {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForReuse()
  override public func updateUI()
  public func setProgress(_ progress: Swift.Double)
  @objc public func handleCancelButtonTapped(recognizer: UIKit.UITapGestureRecognizer)
  @objc deinit
}
extension IMAudioMessageCollectionViewCell : IMAudioPlayerDelegate {
  open func audioPlayer(_ player: IMAudioPlayer, withStates state: IMAudioPlayerState)
}
@objc @_inheritsConvenienceInitializers open class IMTag : RealmSwift.Object {
  @objc dynamic open var id: Swift.String
  @objc dynamic open var name: Swift.String
  open var color: UIKit.UIColor {
    get
  }
  @objc required override dynamic public init()
  public init(name: Swift.String, hexColorCode: Swift.String?)
  public func copy() -> IMTag
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMMemberProperty : RealmSwift.Object, Swift.Decodable {
  @objc dynamic final public var uid: Swift.String {
    get
  }
  @objc dynamic final public var badgeNumber: Swift.Int {
    get
  }
  @objc dynamic final public var lastReadMessageID: Swift.String {
    get
  }
  final public var lastReadMessageCreateTime: Foundation.Date? {
    get
  }
  @objc required override dynamic public init()
  public init(from json: SwiftyJSON.JSON)
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
}
public enum IMRoomType : Swift.String {
  case Group
  case Direct
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class IMRoom : RealmSwift.Object, DifferenceKit.Differentiable {
  @objc dynamic final public var id: Swift.String {
    get
  }
  @objc dynamic final public var name: Swift.String {
    get
  }
  @objc dynamic final public var roomDisplayName: Swift.String {
    get
  }
  @objc dynamic final public var desc: Swift.String {
    get
  }
  @objc dynamic final public var lastMessage: Swift.String {
    get
  }
  final public var lastMessageID: Swift.String? {
    get
  }
  @objc dynamic final public var coverString: Swift.String
  @objc dynamic final public var createTime: Foundation.Date {
    get
  }
  @objc dynamic final public var updateTime: Foundation.Date {
    get
  }
  @objc dynamic final public var pinTime: Foundation.Date? {
    get
  }
  @objc dynamic final public var numberOfUnreadMessages: Swift.Int {
    get
  }
  @objc dynamic final public var isMuted: Swift.Bool {
    get
  }
  @objc dynamic final public var hideTime: Foundation.Date {
    get
  }
  @objc dynamic final public var isRemovedFromRoom: Swift.Bool {
    get
  }
  @objc dynamic final public var extParams: Swift.String {
    get
  }
  @objc dynamic final public var draft: Swift.String?
  @objc dynamic final public var isMentioned: Swift.Bool
  final public let tags: RealmSwift.List<IMTag>
  final public let roomTags: RealmSwift.List<Swift.String>
  final public let members: RealmSwift.List<IMUser>
  final public let memberProperties: RealmSwift.List<IMMemberProperty>
  @objc dynamic final public var pref: Swift.String? {
    get
  }
  final public var coverURL: Foundation.URL? {
    get
  }
  final public var type: IMRoomType {
    get
  }
  final public var isSynced: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Use room.type instead")
  final public var isDirectChat: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Use room.type instead")
  final public var isGroupChat: Swift.Bool {
    get
  }
  final public var displayName: Swift.String {
    get
  }
  final public var isHidden: Swift.Bool {
    get
  }
  final public var differenceIdentifier: Swift.String {
    get
  }
  final public var keys: [Swift.String]
  final public var value: [Swift.String : Any] {
    get
  }
  @objc required override dynamic public init()
  public static var customizedLastMessage: ((IMRoom, IMMessage) -> Swift.String?)?
  public static var customizedRoomName: ((IMRoom) -> Swift.String?)?
  public static var noMember: Swift.String {
    get
  }
  public init(from json: SwiftyJSON.JSON)
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func indexedProperties() -> [Swift.String]
  @objc override public static func ignoredProperties() -> [Swift.String]
  final public func diffIdentifier() -> ObjectiveC.NSObjectProtocol
  final public func isContentEqual(to source: IMRoom) -> Swift.Bool
  final public func setMemberProperty(with newMemberProperty: IMMemberProperty)
  final public var isTranslationEnabled: Swift.Bool {
    get
  }
  final public func copy() -> IMRoom
  public typealias DifferenceIdentifier = Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMAudioMessageTableViewCell : IMMessageTableViewCell {
  open var playerBution: UIKit.UIButton {
    get
    set
  }
  open var loadingIndicator: UIKit.UIActivityIndicatorView {
    get
    set
  }
  open var countdownLabel: UIKit.UILabel {
    get
    set
  }
  open var audioPlayer: IMAudioPlayer? {
    get
    set
  }
  open var currentTimeInterval: Swift.Int {
    get
    set
  }
  open var isProgressViewInitiated: Swift.Bool
  open var progressView: IMProgessView {
    get
    set
  }
  open var cancelButton: UIKit.UIButton {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func removeFromSuperview()
  override open func setupUI(_ reuseIdentifier: Swift.String?)
  override open func updateUI()
  @objc open func playerButionTap()
  @objc open func audioStop(_ sender: Foundation.Notification)
  @objc open func handleCancelButtonTapped(recognizer: UIKit.UITapGestureRecognizer)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMAudioMessageTableViewCell : IMAudioPlayerDelegate {
  open func audioPlayer(_ player: IMAudioPlayer, withStates state: IMAudioPlayerState)
}
extension IMAudioMessageTableViewCell : IMProgressDelegate {
  open func setProgress(_ progress: Swift.Double)
}
public protocol IMRoomsManagerDelegate : AnyObject {
  func roomDidUpdate(room: IMRoom)
  func roomsDidUpdate(rooms: [IMRoom])
  func roomDidDelete(roomID: Swift.String)
  func invitationDidUpdate(invitation: IMInvitation)
  func invitationDidCancel(invitation: IMInvitation)
  func roomGroupsDidUpdate(roomGroups: [IMRoomGroup])
  func roomGroupDidUpdate(roomGroup: IMRoomGroup)
  func roomGroupDidDelete(roomGroupID: Swift.String)
}
extension IMRoomsManagerDelegate {
  public func roomDidUpdate(room: IMRoom)
  public func roomsDidUpdate(rooms: [IMRoom])
  public func roomDidDelete(roomID: Swift.String)
  public func invitationDidUpdate(invitation: IMInvitation)
  public func invitationDidCancel(invitation: IMInvitation)
  public func roomGroupsDidUpdate(roomGroups: [IMRoomGroup])
  public func roomGroupDidUpdate(roomGroup: IMRoomGroup)
  public func roomGroupDidDelete(roomGroupID: Swift.String)
}
@_hasMissingDesignatedInitializers public class IMRoomsManagerDelegateBox {
  weak public var weakRef: IMRoomsManagerDelegate?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class IMRoomsManager {
  public static let shared: IMRoomsManager
  public static var deleteRoomsIfUserWasRemovedFrom: Swift.Bool
  final public var listOfdeletingRoomID: [Swift.String]
  final public var numberOfRoomsPerRequest: Swift.Int
  final public var highlightedText: Swift.String?
  final public func configure(delegate: IMRoomsManagerDelegate)
  final public func fetchUnsyncRoomsFromServer() -> PromiseKit.Promise<[IMRoom]>
  final public func fetchRoomsFromLocalStorage(numberOfRooms: Swift.Int, after roomID: Swift.String? = nil, filter: Foundation.NSPredicate? = nil) -> PromiseKit.Promise<[IMRoom]>
  final public func fetchRoomFromLocalStorage(roomID: Swift.String) -> PromiseKit.Guarantee<IMRoom?>
  final public func searchRoomFromLocalStorage(keyword: Swift.String) -> [IMRoom]
  final public func leaveRoom(roomID: Swift.String, isSystemMessageEnabled: Swift.Bool = true, deleteData: Swift.Bool = true, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)? = nil)
  final public func addRoomToLocalStorage(room: IMRoom)
  final public func addRoomsToLocalStorage(rooms: [IMRoom])
  final public func pinRoom(roomID: Swift.String)
  final public func unpinRoom(roomID: Swift.String)
  final public func hideRoom(roomID: Swift.String)
  final public func unhideRoom(roomID: Swift.String)
  final public func muteRoom(roomID: Swift.String) -> PromiseKit.Promise<IMRoom>
  final public func unmuteRoom(roomID: Swift.String) -> PromiseKit.Promise<IMRoom>
  final public func updateTagsFor(roomId: Swift.String, tags: [IMTag]) -> PromiseKit.Promise<IMRoom>
  final public func toggleTranslation(room: IMRoom) -> PromiseKit.Promise<IMRoom>
  @objc deinit
}
extension IMRoomsManager : IMSocketManagerDelegate {
  final public func socketDidReceiveMessage(message: IMMessage)
  final public func socketDidReceiveRoom(room: IMRoom)
  final public func socketDidReceiveLastReadMessage(roomID: Swift.String, uid: Swift.String, messageID: Swift.String)
  final public func socketDidReceiveInvitation(invitation: IMInvitation)
  final public func socketDidReceiveCancelInvitation(invitationID: Swift.String)
  final public func socketDidReceiveMyPrefChange(json: SwiftyJSON.JSON)
  final public func socketDidReceiveRoomPref(json: SwiftyJSON.JSON)
}
@objc @_inheritsConvenienceInitializers open class IMAddTagViewController : UIKit.UIViewController {
  open var nameTextField: IMTextField {
    get
    set
  }
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var containerView: UIKit.UIView {
    get
    set
  }
  open var stackView1: UIKit.UIStackView {
    get
    set
  }
  open var stackView2: UIKit.UIStackView {
    get
    set
  }
  open var separator: UIKit.UIView {
    get
    set
  }
  open var currentColorView: UIKit.UIView {
    get
    set
  }
  open var colorTextField: IMTextField {
    get
    set
  }
  open var button: UIKit.UIButton {
    get
    set
  }
  open var color: [Swift.String]
  open var isValidated: Swift.Bool {
    get
  }
  open var tag: IMTag?
  open var onCompletion: (([IMTag]) -> Swift.Void)?
  @objc override dynamic open func viewDidLoad()
  @objc open func buttonTapped()
  @objc open func colorButtonTapped(button: UIKit.UIButton)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMAddTagViewController : UIKit.UITextFieldDelegate {
  @objc dynamic open func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @objc dynamic open func textFieldDidChange(_ textField: UIKit.UITextField)
  @objc dynamic open func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc dynamic open func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc dynamic open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class IMMessageActionsViewController : UIKit.UIViewController {
  open var collectionView: UIKit.UICollectionView {
    get
    set
  }
  open var actions: [IMMessageAction]
  weak open var message: IMMessage?
  weak open var image: IMImage?
  weak open var viewController: UIKit.UIViewController?
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMMessageActionsViewController : UIKit.UICollectionViewDelegate {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension IMMessageActionsViewController : UIKit.UICollectionViewDataSource {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers open class IMMessageActionCollectionViewCell : UIKit.UICollectionViewCell {
  open var label: UIKit.UILabel {
    get
    set
  }
  open var action: IMMessageAction? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  open func setupUI()
  open func updateUI()
  @objc deinit
}
public protocol IMNetworkReachabilityManagerDelegate : AnyObject {
  func networkStatusChanged(_ status: Alamofire.NetworkReachabilityManager.NetworkReachabilityStatus)
}
@_hasMissingDesignatedInitializers public class IMNetworkReachabilityManagerDelegateBox {
  weak public var weakRef: IMNetworkReachabilityManagerDelegate?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class IMNetworkReachabilityManager {
  public static let shared: IMNetworkReachabilityManager
  final public func startNotify(delegate: IMNetworkReachabilityManagerDelegate)
  final public func stopNotify(delegate: IMNetworkReachabilityManagerDelegate)
  @objc deinit
}
open class IMUpdatePrefTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  public var endpoint: Swift.String {
    get
  }
  public var method: Alamofire.HTTPMethod {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
  public func perform(key: Swift.String, parameters: [Swift.String : Any]) -> PromiseKit.Promise<IMUpdatePrefTask.ResponseType>
  @objc deinit
}
public enum IMAudioPlayerState : Swift.Equatable {
  public static func == (lhs: IMAudioPlayerState, rhs: IMAudioPlayerState) -> Swift.Bool
  case none
  case prepary
  case ready
  case playing(minute: Swift.Int, second: Swift.Int, formattedString: Swift.String)
  case finish
  case pause
  case cancel
  case error(Swift.Error)
}
public protocol IMAudioPlayerDelegate : AnyObject {
  func audioPlayer(_ player: IMAudioPlayer, withStates state: IMAudioPlayerState)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class IMAudioPlayer : ObjectiveC.NSObject {
  weak public var delegate: IMAudioPlayerDelegate?
  public var state: IMAudioPlayerState {
    get
  }
  @objc deinit
}
extension IMAudioPlayer : AVFAudio.AVAudioPlayerDelegate {
  @objc dynamic open func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
  @objc dynamic open func audioPlayerDecodeErrorDidOccur(_ player: AVFAudio.AVAudioPlayer, error: Swift.Error?)
  @objc dynamic open func audioPlayerBeginInterruption(_ player: AVFAudio.AVAudioPlayer)
  @objc dynamic open func audioPlayerEndInterruption(_ player: AVFAudio.AVAudioPlayer, withOptions flags: Swift.Int)
}
public enum IMRoomAction : Swift.String, Swift.CaseIterable {
  case hide
  case delete
  case read
  case mute
  case pin
  case tag
  public static var backgroundColors: [IMRoomAction : UIKit.UIColor]
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IMRoomAction]
  public typealias RawValue = Swift.String
  public static var allCases: [IMRoomAction] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class IMRoomTableViewCell : UIKit.UITableViewCell {
  public static var imagePlaceholder: UIKit.UIImage?
  weak public var viewController: UIKit.UIViewController?
  open var folderIndicatorView: UIKit.UIView {
    get
    set
  }
  open var avatarViewLeftConstraint: SnapKit.Constraint?
  open var avatarView: IMAvatarView {
    get
    set
  }
  open var pinIndicator: UIKit.UIImageView {
    get
    set
  }
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var titleStackView: UIKit.UIStackView {
    get
    set
  }
  open var muteIndicator: UIKit.UIImageView {
    get
    set
  }
  open var muteIndicatorContainerView: UIKit.UIView {
    get
    set
  }
  open var detailLabel: UIKit.UILabel {
    get
    set
  }
  open var mentionLabel: UIKit.UILabel {
    get
    set
  }
  open var tagListView: TagListView {
    get
    set
  }
  open var timeLabel: UIKit.UILabel {
    get
    set
  }
  open var numberOfUnreadLabel: IMPaddingLabel {
    get
    set
  }
  open var stackView: UIKit.UIStackView {
    get
    set
  }
  open var separator: UIKit.UIView {
    get
    set
  }
  open var dateFormatter: Foundation.DateFormatter {
    get
    set
  }
  open var room: IMRoom? {
    get
    set
  }
  weak open var invitation: IMInvitation? {
    get
    set
  }
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  open func setupUI()
  open func updateUI(room: IMRoom)
  open func updateUI(invitation: IMInvitation)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMCarouselTemplateCollectionViewCell : IMMessageCollectionViewCell {
  public static var collectionViewContentInsets: UIKit.UIEdgeInsets
  open var tapGestureRecogniser: UIKit.UITapGestureRecognizer {
    get
    set
  }
  open var collectionView: UIKit.UICollectionView {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func setup()
  @objc override dynamic open func prepareForReuse()
  override open func updateUI()
  @objc deinit
}
extension IMCarouselTemplateCollectionViewCell : UIKit.UIGestureRecognizerDelegate {
  @objc override dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension IMCarouselTemplateCollectionViewCell : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
extension IMCarouselTemplateCollectionViewCell : UIKit.UICollectionViewDataSource {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers open class IMCarouselTemplateColumnCollectionViewCell : UIKit.UICollectionViewCell {
  open var imageView: UIKit.UIImageView {
    get
    set
  }
  open var imageHeightConstraint: SnapKit.Constraint?
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var textLabel: UIKit.UILabel {
    get
    set
  }
  open var textLabelTopConstraint: SnapKit.Constraint?
  open var line: UIKit.UIView {
    get
    set
  }
  open var buttons: [UIKit.UIButton] {
    get
    set
  }
  open var buttonsHeightConstraints: [SnapKit.Constraint]
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  open var extra: SwiftyJSON.JSON?
  open var column: SwiftyJSON.JSON? {
    get
    set
  }
  open func updateUI()
  @objc open func buttonTapped(_ button: UIKit.UIButton)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IMStyle {
  @_hasMissingDesignatedInitializers public class navigationBar {
    public static var tintColor: UIKit.UIColor?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class room {
    @_hasMissingDesignatedInitializers public class name {
      public static var hasNumberOfMembers: Swift.Bool
      @objc deinit
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class roomInfo {
    @_hasMissingDesignatedInitializers public class button {
      public static var font: UIKit.UIFont
      public static var textColor: UIKit.UIColor
      public static var backgroundColor: UIKit.UIColor
      public static var cornerRadius: CoreGraphics.CGFloat
      public static var width: CoreGraphics.CGFloat
      public static var height: CoreGraphics.CGFloat
      @objc deinit
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class rooms {
    public static var backgroundColor: UIKit.UIColor
    @_hasMissingDesignatedInitializers public class cell {
      public static var height: CoreGraphics.CGFloat
      @_hasMissingDesignatedInitializers public class avatar {
        public static var width: CoreGraphics.CGFloat
        public static var height: CoreGraphics.CGFloat
        public static var cornerRadius: CoreGraphics.CGFloat
        public static var backgroundColor: UIKit.UIColor
        public static var borderColor: UIKit.UIColor
        public static var borderWidth: CoreGraphics.CGFloat
        public static var font: UIKit.UIFont
        public static var textColor: UIKit.UIColor
        public static var showMembersAvatarIfNoRoomCover: Swift.Bool
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class title {
        @_hasMissingDesignatedInitializers public class read {
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class unread {
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class detail {
        @_hasMissingDesignatedInitializers public class read {
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class unread {
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        public static var numberOfLines: Swift.Int
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class time {
        public static var font: UIKit.UIFont
        public static var textColor: UIKit.UIColor
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class numberOfUnread {
        public static var font: UIKit.UIFont
        public static var textColor: UIKit.UIColor
        public static var backgroundColor: UIKit.UIColor
        public static var cornerRadius: CoreGraphics.CGFloat
        public static var height: CoreGraphics.CGFloat
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class separator {
        public static var isHidden: Swift.Bool
        public static var height: CoreGraphics.CGFloat
        public static var backgroundColor: UIKit.UIColor
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class muteIndicator {
        public static var width: CoreGraphics.CGFloat
        public static var height: CoreGraphics.CGFloat
        public static var imageName: Swift.String
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class pinIndicator {
        public static var width: CoreGraphics.CGFloat
        public static var height: CoreGraphics.CGFloat
        public static var imageName: Swift.String
        @objc deinit
      }
      @objc deinit
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class messages {
    public static var backgroundColor: UIKit.UIColor
    public static var actionType: IMMessageActionType
    public static var canReport: Swift.Bool
    public static var customizedUnsupportedMessage: Swift.String
    @_hasMissingDesignatedInitializers public class inputAccessory {
      public static var type: Swift.Int
      public static var isSendButtonAudioButtonCombined: Swift.Bool
      public static var backgroundColor: UIKit.UIColor
      public static var insets: UIKit.UIEdgeInsets
      @_hasMissingDesignatedInitializers public class response {
        public static var backgroundColor: UIKit.UIColor
        public static var height: CoreGraphics.CGFloat
        @_hasMissingDesignatedInitializers public class avatar {
          public static var width: CoreGraphics.CGFloat
          public static var height: CoreGraphics.CGFloat
          public static var cornerRadius: CoreGraphics.CGFloat
          public static var backgroundColor: UIKit.UIColor
          public static var borderColor: UIKit.UIColor
          public static var borderWidth: CoreGraphics.CGFloat
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          public static var insets: UIKit.UIEdgeInsets
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class title {
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class detail {
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class image {
          public static var width: CoreGraphics.CGFloat
          public static var height: CoreGraphics.CGFloat
          public static var cornerRadius: CoreGraphics.CGFloat
          public static var backgroundColor: UIKit.UIColor
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class close {
          public static var width: CoreGraphics.CGFloat
          public static var height: CoreGraphics.CGFloat
          public static var insets: UIKit.UIEdgeInsets
          @objc deinit
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class mentions {
        public static var height: CoreGraphics.CGFloat
        @_hasMissingDesignatedInitializers public class close {
          public static var width: CoreGraphics.CGFloat
          public static var height: CoreGraphics.CGFloat
          public static var insets: UIKit.UIEdgeInsets
          @objc deinit
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class separator {
        public static var isHidden: Swift.Bool
        public static var backgroundColor: UIKit.UIColor
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class textBar {
        public static var font: UIKit.UIFont
        public static var height: CoreGraphics.CGFloat
        public static var cornerRadius: CoreGraphics.CGFloat
        public static var backgroundColor: UIKit.UIColor
        public static var placeholder: Swift.String
        public static var textColor: UIKit.UIColor
        public static var placeholderColor: UIKit.UIColor
        public static var borderColor: UIKit.UIColor
        public static var borderWidth: CoreGraphics.CGFloat
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class send {
        public static var width: CoreGraphics.CGFloat
        public static var height: CoreGraphics.CGFloat
        public static var tintColor: UIKit.UIColor
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class cell {
      public static var cornerRadius: CoreGraphics.CGFloat
      public static var spaceBetweenGroupedCell: CoreGraphics.CGFloat
      public static var maxPercentageOfScreenWidth: CoreGraphics.CGFloat
      @_hasMissingDesignatedInitializers public class time {
        public static var font: UIKit.UIFont
        public static var textColor: UIKit.UIColor
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class readReceipt {
        public static var font: UIKit.UIFont
        public static var textColor: UIKit.UIColor
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class name {
        public static var font: UIKit.UIFont
        public static var textColor: UIKit.UIColor
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class incomingCell {
      public static var hasSenderNameAtGroupChat: Swift.Bool
      public static var hasSenderNameAtDirectChat: Swift.Bool
      public static var backgroundColor: UIKit.UIColor
      public static var textColor: UIKit.UIColor
      public static var translatedTextColor: UIKit.UIColor
      public static var borderColor: UIKit.UIColor
      public static var borderWidth: CoreGraphics.CGFloat
      public static var isBorderHidden: Swift.Bool
      @_hasMissingDesignatedInitializers public class response {
        public static var backgroundColor: UIKit.UIColor
        @_hasMissingDesignatedInitializers public class title {
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class detail {
          public static var textColor: UIKit.UIColor
          public static var backgroundColor: UIKit.UIColor
          @objc deinit
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class avatar {
        public static var width: CoreGraphics.CGFloat
        public static var height: CoreGraphics.CGFloat
        public static var cornerRadius: CoreGraphics.CGFloat
        public static var backgroundColor: UIKit.UIColor
        public static var borderColor: UIKit.UIColor
        public static var borderWidth: CoreGraphics.CGFloat
        public static var font: UIKit.UIFont
        public static var textColor: UIKit.UIColor
        public static var insets: UIKit.UIEdgeInsets
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class linkPreview {
        @_hasMissingDesignatedInitializers public class title {
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class detail {
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class outgoingCell {
      public static var backgroundColor: UIKit.UIColor
      public static var textColor: UIKit.UIColor
      public static var borderColor: UIKit.UIColor
      public static var borderWidth: CoreGraphics.CGFloat
      public static var isBorderHidden: Swift.Bool
      public static var insets: UIKit.UIEdgeInsets
      @_hasMissingDesignatedInitializers public class response {
        public static var backgroundColor: UIKit.UIColor
        @_hasMissingDesignatedInitializers public class title {
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class detail {
          public static var textColor: UIKit.UIColor
          public static var backgroundColor: UIKit.UIColor
          @objc deinit
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class retry {
        public static var width: CoreGraphics.CGFloat
        public static var height: CoreGraphics.CGFloat
        public static var cornerRadius: CoreGraphics.CGFloat
        public static var backgroundColor: UIKit.UIColor
        public static var tintColor: UIKit.UIColor
        public static var borderColor: UIKit.UIColor
        public static var borderWidth: CoreGraphics.CGFloat
        public static var imageName: Swift.String
        public static var rightInset: CoreGraphics.CGFloat
        public static var leftInset: CoreGraphics.CGFloat
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class linkPreview {
        @_hasMissingDesignatedInitializers public class title {
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class detail {
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class textCell {
      public static var hashtagColor: UIKit.UIColor
      public static var mentionColor: UIKit.UIColor
      public static var URLColor: UIKit.UIColor
      public static var font: UIKit.UIFont
      public static var insets: UIKit.UIEdgeInsets
      @_hasMissingDesignatedInitializers public class response {
        public static var backgroundColor: UIKit.UIColor
        public static var insets: UIKit.UIEdgeInsets
        @_hasMissingDesignatedInitializers public class avatar {
          public static var width: CoreGraphics.CGFloat
          public static var height: CoreGraphics.CGFloat
          public static var cornerRadius: CoreGraphics.CGFloat
          public static var backgroundColor: UIKit.UIColor
          public static var borderColor: UIKit.UIColor
          public static var borderWidth: CoreGraphics.CGFloat
          public static var font: UIKit.UIFont
          public static var textColor: UIKit.UIColor
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class title {
          public static var font: UIKit.UIFont
          public static var bottomInset: CoreGraphics.CGFloat
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class detail {
          public static var font: UIKit.UIFont
          public static var numberOfLines: Swift.Int
          public static var cornerRadius: CoreGraphics.CGFloat
          public static var insets: UIKit.UIEdgeInsets
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class image {
          public static var width: CoreGraphics.CGFloat
          public static var height: CoreGraphics.CGFloat
          public static var cornerRadius: CoreGraphics.CGFloat
          public static var backgroundColor: UIKit.UIColor
          public static var leftInset: CoreGraphics.CGFloat
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class separator {
          public static var isHidden: Swift.Bool
          @objc deinit
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class linkPreview {
        public static var height: CoreGraphics.CGFloat
        public static var insets: UIKit.UIEdgeInsets
        @_hasMissingDesignatedInitializers public class title {
          public static var bottomInset: CoreGraphics.CGFloat
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class image {
          public static var width: CoreGraphics.CGFloat
          public static var height: CoreGraphics.CGFloat
          public static var cornerRadius: CoreGraphics.CGFloat
          public static var backgroundColor: UIKit.UIColor
          @objc deinit
        }
        @_hasMissingDesignatedInitializers public class line {
          public static var width: CoreGraphics.CGFloat
          public static var height: CoreGraphics.CGFloat?
          public static var cornerRadius: CoreGraphics.CGFloat
          public static var backgroundColor: UIKit.UIColor
          public static var topInset: CoreGraphics.CGFloat
          public static var bottomInset: CoreGraphics.CGFloat
          @objc deinit
        }
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class stickerCell {
      public static var size: CoreGraphics.CGFloat
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class imageCell {
      public static var backgroundColor: UIKit.UIColor
      public static var percentageOfScreenWidth: CoreGraphics.CGFloat
      public static var percentageOfScreenHeight: CoreGraphics.CGFloat
      public static var maxAspectRatio: CoreGraphics.CGFloat
      public static var minAspectRatio: CoreGraphics.CGFloat
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class dateCell {
      public static var backgroundColor: UIKit.UIColor
      public static var textColor: UIKit.UIColor
      public static var font: UIKit.UIFont
      public static var borderColor: UIKit.UIColor
      public static var borderWidth: CoreGraphics.CGFloat
      public static var height: CoreGraphics.CGFloat
      public static var cornerRadius: CoreGraphics.CGFloat
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class systemCell {
      public static var backgroundColor: UIKit.UIColor
      public static var textColor: UIKit.UIColor
      public static var font: UIKit.UIFont
      public static var borderColor: UIKit.UIColor
      public static var borderWidth: CoreGraphics.CGFloat
      public static var cornerRadius: CoreGraphics.CGFloat
      public static var dateFormat: Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class actionPopover {
      public static var width: CoreGraphics.CGFloat
      @_hasMissingDesignatedInitializers public class tableView {
        public static var contentInset: UIKit.UIEdgeInsets
        public static var rowHeight: CoreGraphics.CGFloat
        public static var backgroundColor: UIKit.UIColor
        public static var selectedBackgroundColor: UIKit.UIColor
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class image {
        public static var width: CoreGraphics.CGFloat
        public static var height: CoreGraphics.CGFloat
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class title {
        public static var textColor: UIKit.UIColor
        public static var font: UIKit.UIFont
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class stickerPreview {
      public static var height: CoreGraphics.CGFloat
      public static var topInset: CoreGraphics.CGFloat
      public static var bottomInset: CoreGraphics.CGFloat
      @_hasMissingDesignatedInitializers public class close {
        public static var width: CoreGraphics.CGFloat
        public static var height: CoreGraphics.CGFloat
        public static var imageName: Swift.String
        public static var topInset: CoreGraphics.CGFloat
        public static var rightInset: CoreGraphics.CGFloat
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class checkBox {
      public static var width: CoreGraphics.CGFloat
      public static var height: CoreGraphics.CGFloat
      public static var leftInset: CoreGraphics.CGFloat
      public static var rightInset: CoreGraphics.CGFloat
      public static var selectedImageName: Swift.String
      public static var unselectedImageName: Swift.String
      @objc deinit
    }
    @objc deinit
  }
  @_hasMissingDesignatedInitializers public class searching {
    public static var backgroundColor: UIKit.UIColor
    @_hasMissingDesignatedInitializers public class list {
      public static var backgroundColor: UIKit.UIColor
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class title {
      public static var textColor: UIKit.UIColor
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class textField {
      public static var textColor: UIKit.UIColor
      public static var placeholderTextColor: UIKit.UIColor
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class backButton {
      public static var tintColor: UIKit.UIColor
      public static var imageName: Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class clearButton {
      public static var tintColor: UIKit.UIColor
      public static var imageName: Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class previousButton {
      public static var tintColor: UIKit.UIColor
      public static var disabledColor: UIKit.UIColor
      public static var imageName: Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class nextButton {
      public static var tintColor: UIKit.UIColor
      public static var disabledColor: UIKit.UIColor
      public static var imageName: Swift.String
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class messageCell {
      public static var backgroundColor: UIKit.UIColor
      @_hasMissingDesignatedInitializers public class avatar {
        public static var width: CoreGraphics.CGFloat
        public static var height: CoreGraphics.CGFloat
        public static var cornerRadius: CoreGraphics.CGFloat
        public static var backgroundColor: UIKit.UIColor
        public static var borderColor: UIKit.UIColor
        public static var borderWidth: CoreGraphics.CGFloat
        public static var font: UIKit.UIFont
        public static var textColor: UIKit.UIColor
        public static var insets: UIKit.UIEdgeInsets
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class title {
        public static var font: UIKit.UIFont
        public static var textColor: UIKit.UIColor
        public static var insets: UIKit.UIEdgeInsets
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class detail {
        public static var font: UIKit.UIFont
        public static var textColor: UIKit.UIColor
        public static var bottomInset: CoreGraphics.CGFloat
        @_hasMissingDesignatedInitializers public class keyword {
          public static var textColor: UIKit.UIColor
          public static var fontWeight: UIKit.UIFont.Weight
          @objc deinit
        }
        @objc deinit
      }
      @_hasMissingDesignatedInitializers public class time {
        public static var font: UIKit.UIFont
        public static var textColor: UIKit.UIColor
        @objc deinit
      }
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class count {
      public static var currentIndexColor: UIKit.UIColor
      public static var textColor: UIKit.UIColor
      public static var font: UIKit.UIFont
      @objc deinit
    }
    @_hasMissingDesignatedInitializers public class bottomView {
      public static var backgroundColor: UIKit.UIColor
      @objc deinit
    }
    @objc deinit
  }
  @objc deinit
}
public enum IMMessageType {
  case Text
  case Image
  case Audio
  case Video
  case File
  case Location
  case Sticker
  case System
  case Template
  case Other
  public static func == (a: IMMessageType, b: IMMessageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum IMMessageStatus : Swift.String {
  case initial
  case sent
  case delivered
  case undelivered
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum IMMessageGroupPosition : Swift.Equatable {
  case head
  case body
  case tail
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: IMMessageGroupPosition, b: IMMessageGroupPosition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class IMMessage : RealmSwift.Object, IGListDiffKit.ListDiffable {
  @objc dynamic final public var id: Swift.String {
    get
  }
  @objc dynamic final public var roomID: Swift.String {
    get
  }
  @objc dynamic final public var text: Swift.String {
    get
  }
  @objc dynamic final public var stickerID: Swift.String {
    get
  }
  @objc dynamic final public var createTime: Foundation.Date {
    get
  }
  @objc dynamic final public var updateTime: Foundation.Date {
    get
  }
  @objc dynamic final public var senderID: Swift.String {
    get
  }
  @objc dynamic final public var senderNickname: Swift.String
  @objc dynamic final public var senderAvatarString: Swift.String
  final public var sender: IMUser? {
    get
  }
  final public let images: RealmSwift.List<IMImage>
  @objc dynamic final public var file: IMFile? {
    get
  }
  @objc dynamic final public var systemEvent: IMSystemEvent? {
    get
  }
  @objc dynamic final public var location: IMLocation? {
    get
  }
  @objc dynamic final public var responseObject: IMResponseObject? {
    get
  }
  final public let membersWhoHaveRead: RealmSwift.List<Swift.String>
  final public let linkPreviews: RealmSwift.List<IMLinkPreview>
  final public var positions: [IMMessageGroupPosition]
  @objc dynamic final public var messageType: Swift.String {
    get
  }
  final public let mentions: RealmSwift.List<Swift.String>
  @objc dynamic final public var translatedText: Swift.String
  final public var displayTranslatedText: Swift.String {
    get
  }
  final public var isTranslated: Swift.Bool {
    get
  }
  final public var extra: SwiftyJSON.JSON {
    get
  }
  final public var isAllEmoji: Swift.Bool {
    get
  }
  final public var type: IMMessageType {
    get
  }
  final public var status: IMMessageStatus {
    get
    set
  }
  final public var isSyncedWithLocalData: Swift.Bool {
    get
  }
  final public var string: Swift.String {
    get
  }
  final public var md5: Swift.String {
    get
  }
  final public var parameters: [Swift.String : Any] {
    get
  }
  @objc required override dynamic public init()
  public init(from json: SwiftyJSON.JSON)
  convenience public init(from dict: [Swift.String : Any])
  public init(roomID: Swift.String, text: Swift.String, senderID: Swift.String, responseObject: IMResponseObject? = nil, hiddenURL: Foundation.URL? = nil, mentions: [Swift.String] = [])
  public init(roomID: Swift.String, images: [UIKit.UIImage], senderID: Swift.String)
  public init(roomID: Swift.String, assets: [Photos.PHAsset], senderID: Swift.String)
  public init(roomID: Swift.String, stickerID: Swift.String, senderID: Swift.String)
  public init(roomID: Swift.String, data: Foundation.Data, originalPath: Foundation.URL? = nil, senderID: Swift.String, messageType: Swift.String, duration: Swift.Int? = nil, fileName: Swift.String? = nil, fileExtension: Swift.String? = nil, mimeType: Swift.String? = nil, bytes: Swift.Int? = nil)
  public init(roomID: Swift.String, coordinate: CoreLocation.CLLocationCoordinate2D, senderID: Swift.String, address: Swift.String)
  public init(roomID: Swift.String, senderID: Swift.String, file: IMFile, image: IMImage)
  @objc override public static func primaryKey() -> Swift.String?
  @objc override public static func ignoredProperties() -> [Swift.String]
  @objc override public static func indexedProperties() -> [Swift.String]
  @objc final public func diffIdentifier() -> ObjectiveC.NSObjectProtocol
  @objc final public func isEqual(toDiffableObject object: IGListDiffKit.ListDiffable?) -> Swift.Bool
  final public func set(withRoomID roomID: Swift.String)
  final public func read(by uid: Swift.String)
  final public func removeMemberWhoReadThis(uid: Swift.String)
  final public func copy() -> IMMessage
  final public func transformToResponseObject(image: IMImage? = nil) -> IMResponseObject
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMAvatarView : UIKit.UIView {
  public static var imagePlaceholder: UIKit.UIImage?
  @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  public var labels: [UIKit.UILabel] {
    get
    set
  }
  public var users: [(url: Foundation.URL?, name: Swift.String?)] {
    get
    set
  }
  public var image: UIKit.UIImage? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func prepareForReuse()
  @objc deinit
}
public protocol IMPhotoInputViewControllerDelegate : AnyObject {
  func didUpdateSelectedAssets(_ selectedAssets: [Photos.PHAsset])
}
@objc @_inheritsConvenienceInitializers open class IMPhotoInputViewController : UIKit.UIInputViewController {
  public var delegate: IMPhotoInputViewControllerDelegate?
  public var selectedAssets: [Photos.PHAsset] {
    get
  }
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension IMPhotoInputViewController : Photos.PHPhotoLibraryChangeObserver {
  @objc dynamic public func photoLibraryDidChange(_ changeInstance: Photos.PHChange)
}
extension IMPhotoInputViewController : UIKit.UICollectionViewDataSource {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension IMPhotoInputViewController : UIKit.UICollectionViewDelegate {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic open func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers open class IMInputAccessoryView : UIKit.UIView {
  public typealias Style = IMStyle.messages.inputAccessory
  weak open var viewController: UIKit.UIViewController?
  open var keyboardType: IMKeyboardType
  open var roomID: Swift.String
  open var primaryViewTopConstraint: SnapKit.Constraint?
  open var primaryViewBottomConstraint: SnapKit.Constraint?
  open var primaryView: UIKit.UIView {
    get
    set
  }
  open var isTextBarExpanded: Swift.Bool
  open var textBar: UIKit.UIView {
    get
    set
  }
  open var textBarLeftConstraint: SnapKit.Constraint?
  open var textView: FlexibleTextView {
    get
    set
  }
  open var stickerTextView: UIKit.UITextView {
    get
    set
  }
  open var audioTextView: UIKit.UITextView {
    get
    set
  }
  open var utilityTextView: UIKit.UITextView {
    get
    set
  }
  open var templateTextView: UIKit.UITextView {
    get
    set
  }
  open var photoTextView: UIKit.UITextView {
    get
    set
  }
  open var sendButton: UIKit.UIButton {
    get
    set
  }
  open var audioButton: UIKit.UIButton {
    get
    set
  }
  open var imageButton: UIKit.UIButton {
    get
    set
  }
  open var cameraButton: UIKit.UIButton {
    get
    set
  }
  open var returnButton: UIKit.UIButton {
    get
    set
  }
  open var addButton: UIKit.UIButton {
    get
    set
  }
  open var stickerButton: UIKit.UIButton {
    get
    set
  }
  open var imagePicker: UIKit.UIImagePickerController {
    get
    set
  }
  open var mentionsTableView: IMMentionsTableView {
    get
    set
  }
  open var responseObjectInputAccessoryView: IMResponseObjectInputAccessoryView {
    get
    set
  }
  open var responseObject: IMResponseObject? {
    get
    set
  }
  open var selectedPhotoBar: UIKit.UIView {
    get
    set
  }
  open var sendImagesButton: UIKit.UIButton {
    get
    set
  }
  open var dismissPhotoButton: UIKit.UIButton {
    get
    set
  }
  open var photosCountLabel: UIKit.UILabel {
    get
    set
  }
  public var selectedPhotosCount: Swift.Int? {
    get
    set
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  open func layoutUI()
  @objc open func sendButtonTapped()
  open func presentImagePicker(_ sourceType: UIKit.UIImagePickerController.SourceType)
  @objc open func audioButtonTapped()
  @objc open func imageButtonTapped()
  @objc open func cameraButtonTapped()
  open func expandTextBar()
  @objc open func foldTextBar()
  @objc open func addButtonTapped()
  @objc open func stickerButtonTapped()
  @objc open func sendImagesButtonTapped()
  @objc open func dismissPhotoButtonTapped()
  open func resignAllFirstResponder()
  open func updatePrimaryViewTopConstraint()
  @objc deinit
}
extension IMInputAccessoryView : UIKit.UITextViewDelegate {
  @objc dynamic open func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @objc dynamic open func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @objc dynamic open func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc dynamic open func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @objc dynamic open func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @objc dynamic open func textViewDidChange(_ textView: UIKit.UITextView)
  open func updateButtonsIfNeeded()
}
extension IMInputAccessoryView : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc dynamic open func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc dynamic open func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension IMInputAccessoryView : IMMentionsTableViewDelegate {
  open func tableViewDidReload()
  open func tableViewDidDismiss()
  open func tableViewDidSelect(user: IMUser)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class FlexibleTextView : UIKit.UITextView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
}
extension IMInputAccessoryView : IMPhotoInputViewControllerDelegate {
  open func didUpdateSelectedAssets(_ selectedAssets: [Photos.PHAsset])
}
public protocol NetworkClientType {
  func performRequest<Request>(_ networkRequest: Request) -> PromiseKit.Promise<Foundation.Data> where Request : NetworkRequest
  func performDownloadRequest<Request>(_ networkRequest: Request) -> PromiseKit.Promise<Foundation.URL> where Request : NetworkRequest
}
@_inheritsConvenienceInitializers public class IMSession : Alamofire.Session {
  public static var serverTrustManager: Alamofire.ServerTrustManager?
  public static var requestInterceptor: Alamofire.RequestInterceptor?
  public var isEnabled: Swift.Bool
  public static let shared: IMSession
  override public init(session: Foundation.URLSession, delegate: Alamofire.SessionDelegate, rootQueue: Dispatch.DispatchQueue, startRequestsImmediately: Swift.Bool = super, requestQueue: Dispatch.DispatchQueue? = super, serializationQueue: Dispatch.DispatchQueue? = super, interceptor: Alamofire.RequestInterceptor? = super, serverTrustManager: Alamofire.ServerTrustManager? = super, redirectHandler: Alamofire.RedirectHandler? = super, cachedResponseHandler: Alamofire.CachedResponseHandler? = super, eventMonitors: [Alamofire.EventMonitor] = super)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class IMRequestInterceptor : Alamofire.RequestInterceptor {
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: Alamofire.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, Swift.Error>) -> Swift.Void)
  open func retry(_ request: Alamofire.Request, for session: Alamofire.Session, dueTo error: Swift.Error, completion: @escaping (Alamofire.RetryResult) -> Swift.Void)
  @objc deinit
}
public struct NetworkClient : NetworkClientType {
  public func performRequest<Request>(_ networkRequest: Request) -> PromiseKit.Promise<Foundation.Data> where Request : NetworkRequest
  public func performDownloadRequest<Request>(_ networkRequest: Request) -> PromiseKit.Promise<Foundation.URL> where Request : NetworkRequest
}
@objc open class IMChatRoomViewController : UIObservableViewController {
  final public let viewModel: IMChatRoomViewModel
  open var stickerPreviewViewBottomConstraint: SnapKit.Constraint?
  open var stickerPreviewView: IMStickerPreviewView {
    get
    set
  }
  open var stickerMessage: IMMessage? {
    get
    set
  }
  open var tableView: UIKit.UITableView {
    get
    set
  }
  open var bottomButtonBottomConstraint: SnapKit.Constraint?
  open var bottomButton: UIKit.UIButton {
    get
    set
  }
  open var inputBarView: IMInputAccessoryView {
    get
    set
  }
  open var messagesSelectionInputAccessoryViewController: IMMessagesSelectionInputAccessoryViewController {
    get
    set
  }
  open var disableInputAccessoryViewController: IMDisableInputAccessoryViewController {
    get
    set
  }
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var inputAccessoryView: UIKit.UIView? {
    @objc get
  }
  @objc override dynamic open var inputViewController: UIKit.UIInputViewController? {
    @objc get
  }
  open var stickerInputViewController: UIKit.UIInputViewController {
    get
    set
  }
  open var audioInputViewController: IMAudioInputViewController {
    get
    set
  }
  open var utilityInputViewController: IMUtilityInputViewController {
    get
    set
  }
  open var templateInputViewController: IMTemplateInputViewController {
    get
    set
  }
  open var photoInputViewController: IMPhotoInputViewController {
    get
    set
  }
  open var floatingPanelController: FloatingPanel.FloatingPanelController {
    get
    set
  }
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var muteIndicator: UIKit.UIImageView {
    get
    set
  }
  open var stackView: UIKit.UIStackView {
    get
    set
  }
  final public let roomID: Swift.String
  public init(roomID: Swift.String)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLayoutSubviews()
  override open func applicationDidBecomeActive()
  open func setTableViewInset()
  override open func keyboardWillChangeFrame(with keyboardRect: CoreGraphics.CGRect, duration: Foundation.TimeInterval, animationCurve: Swift.UInt)
  open func presentDocumentPicker()
  open func presentLocationPicker()
  open func setMessageSelectable(_ selectable: Swift.Bool)
  open func messagesDidSelect(_ messages: [IMMessage])
  open func checkIfViewpointKeptAtBottom()
  @objc open func bottomButtonTapped()
  open func chatRoomDidUpdate(room: IMRoom)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension IMChatRoomViewController : IMChatRoomViewModelDelagate {
  open func scrollToBotom(animated: Swift.Bool = true)
  open func insert(at indexPaths1: [Foundation.IndexPath], reloadAt indexPaths2: [Foundation.IndexPath])
  open func reload(at indexPaths: [Foundation.IndexPath])
  open func deleteRows(at indexPaths: [Foundation.IndexPath])
  open func deleteSections(_ sections: Foundation.IndexSet)
  open func reloadData()
  open func insert(sections: [[IMMessage]], rows: [IMMessage])
  open func insert(at sections: Foundation.IndexSet)
  open func stateDidChange(state: ViewModelState)
  open func safeScrollToRow(at indexPath: Foundation.IndexPath, at scrollPosition: UIKit.UITableView.ScrollPosition, animated: Swift.Bool)
  open func roomDidUpdate(room: IMRoom)
}
extension IMChatRoomViewController : UIKit.UITableViewDelegate {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc dynamic open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @objc dynamic open func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc dynamic open func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc dynamic open func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  open func hideTopSectionHeaderView(animated: Swift.Bool = true)
}
extension IMChatRoomViewController : UIKit.UITableViewDataSource {
  @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension IMChatRoomViewController : IMMessageTableViewCellDelegate {
  open func mentionDidTap(user: IMUser)
  open func imageDidTap(image: IMImage)
}
extension IMChatRoomViewController : FloatingPanel.FloatingPanelControllerDelegate {
  @objc dynamic open func floatingPanel(_ fpc: FloatingPanel.FloatingPanelController, shouldRemoveAt location: CoreGraphics.CGPoint, with velocity: CoreGraphics.CGVector) -> Swift.Bool
}
extension IMChatRoomViewController : UIKit.UITableViewDataSourcePrefetching {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, prefetchRowsAt indexPaths: [Foundation.IndexPath])
}
extension IMChatRoomViewController : UIKit.UIDocumentPickerDelegate {
  @objc dynamic open func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @objc dynamic open func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentAt url: Foundation.URL)
  @objc dynamic open func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
}
extension IMChatRoomViewController : IMNetworkReachabilityManagerDelegate {
  public func networkStatusChanged(_ status: Alamofire.NetworkReachabilityManager.NetworkReachabilityStatus)
}
public protocol IMMessageCell : UIKit.UICollectionViewCell {
  var timeLabel: UIKit.UILabel { get set }
  var nameLabel: UIKit.UILabel { get set }
  var readReceiptLabel: UIKit.UILabel { get set }
  var dateFormatter: Foundation.DateFormatter { get set }
  var bubbleView: UIKit.UIView { get set }
  var bubbleMaskView: UIKit.UIView { get set }
  var avatarView: IMAvatarView { get set }
  var sendingIndicator: UIKit.UIImageView { get set }
  var retryButton: UIKit.UIButton { get set }
  var checkbox: UIKit.UIButton { get set }
  var isCheckboxInitiated: Swift.Bool { get set }
  var isRetrybuttonInitiated: Swift.Bool { get set }
  var longPressGestureRecognizer: UIKit.UILongPressGestureRecognizer { get set }
  var tapGestureRecognizer: UIKit.UITapGestureRecognizer { get set }
  var swipeGestureRecognizer: UIKit.UISwipeGestureRecognizer { get set }
  var delegate: IMMessageCellDelegate? { get set }
  var message: IMMessage? { get set }
  func updateUI()
  func layoutSendingIndicator(_ imageView: UIKit.UIImageView) -> UIKit.UIImageView
  func layoutAvatarView(_ avatarView: IMAvatarView) -> IMAvatarView
  func layoutTimeLabel(_ label: UIKit.UILabel) -> UIKit.UILabel
  func layoutBubbleView(_ view: UIKit.UIView) -> UIKit.UIView
  func layoutRetryButton(_ button: UIKit.UIButton) -> UIKit.UIButton
  func layoutReadReceiptLabel(_ label: UIKit.UILabel) -> UIKit.UILabel
  func layoutNameLabel(_ label: UIKit.UILabel) -> UIKit.UILabel
}
extension IMMessageCell {
  public func prepareTimeLabel(completion: ((UIKit.UILabel) -> UIKit.UILabel)? = nil) -> UIKit.UILabel
  public func layoutTimeLabel(_ label: UIKit.UILabel) -> UIKit.UILabel
  public func prepareNameLabel(completion: ((UIKit.UILabel) -> UIKit.UILabel)? = nil) -> UIKit.UILabel
  public func layoutNameLabel(_ label: UIKit.UILabel) -> UIKit.UILabel
  public func prepareReadReceiptLabel(completion: ((UIKit.UILabel) -> UIKit.UILabel)? = nil) -> UIKit.UILabel
  public func layoutReadReceiptLabel(_ label: UIKit.UILabel) -> UIKit.UILabel
  public func prepareDateFormatter() -> Foundation.DateFormatter
  public func prepareBubbleView(completion: ((UIKit.UIView) -> UIKit.UIView)? = nil) -> UIKit.UIView
  public func layoutBubbleView(_ view: UIKit.UIView) -> UIKit.UIView
  public func prepareAvatarView(completion: ((IMAvatarView) -> IMAvatarView)? = nil) -> IMAvatarView
  public func layoutAvatarView(_ avatarView: IMAvatarView) -> IMAvatarView
  public func prepareSendingIndicator(completion: ((UIKit.UIImageView) -> UIKit.UIImageView)? = nil) -> UIKit.UIImageView
  public func layoutSendingIndicator(_ imageView: UIKit.UIImageView) -> UIKit.UIImageView
  public func prepareRetryButton(completion: ((UIKit.UIButton) -> UIKit.UIButton)? = nil) -> UIKit.UIButton
  public func layoutRetryButton(_ button: UIKit.UIButton) -> UIKit.UIButton
  public func prepareCheckbox(completion: ((UIKit.UIButton) -> UIKit.UIButton)? = nil) -> UIKit.UIButton
  public func layoutCheckbox(_ button: UIKit.UIButton) -> UIKit.UIButton
  public var isIncomingMessage: Swift.Bool {
    get
  }
  public var isOutgoingMessage: Swift.Bool {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class IMMessageCollectionViewCell : UIKit.UICollectionViewCell, IMMessageCell {
  public var timeLabel: UIKit.UILabel {
    get
    set
  }
  public var nameLabel: UIKit.UILabel {
    get
    set
  }
  public var readReceiptLabel: UIKit.UILabel {
    get
    set
  }
  public var dateFormatter: Foundation.DateFormatter {
    get
    set
  }
  public var bubbleView: UIKit.UIView {
    get
    set
  }
  public var bubbleMaskView: UIKit.UIView {
    get
    set
  }
  public var isBubbleMaskViewInitiated: Swift.Bool
  public var avatarView: IMAvatarView {
    get
    set
  }
  public var sendingIndicator: UIKit.UIImageView {
    get
    set
  }
  public var retryButton: UIKit.UIButton {
    get
    set
  }
  public var isRetrybuttonInitiated: Swift.Bool
  public var checkbox: UIKit.UIButton {
    get
    set
  }
  public var isCheckboxInitiated: Swift.Bool
  public var longPressGestureRecognizer: UIKit.UILongPressGestureRecognizer {
    get
    set
  }
  public var tapGestureRecognizer: UIKit.UITapGestureRecognizer {
    get
    set
  }
  public var swipeGestureRecognizer: UIKit.UISwipeGestureRecognizer {
    get
    set
  }
  weak public var delegate: IMMessageCellDelegate?
  weak public var message: IMMessage? {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  open func updateUI()
  @objc open func handleAvatarTapped()
  public func setupForIncomingMessageCell()
  public func setupForOutgoingMessageCell()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct IMStickerSet {
  public var id: Swift.String {
    get
  }
  public var stickerIDs: [Swift.String] {
    get
  }
  public init(id: Swift.String, stickerIDs: [Swift.String])
}
@objc @_inheritsConvenienceInitializers open class IMStickerInputViewController : UIKit.UIInputViewController {
  open var stickerSets: [IMStickerSet]
  weak open var viewController: UIKit.UIViewController?
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMStickerInputViewController : UIKit.UICollectionViewDelegate {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool)
  @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
}
extension IMStickerInputViewController : UIKit.UICollectionViewDataSource {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension IMStickerInputViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
public enum NetworkRequestError : Swift.Error {
  case DecodingError(error: Swift.DecodingError)
  case JsonParsingError(error: Swift.Error)
  case UnknownError
  case NoNetworkConnection
  case ConnectionTimeout
  case FileUploadError
  case IMDeviceIdentifierError
  case NetworkRequestDisabled
}
public typealias IgnorableResult = ()
public protocol NetworkRequest {
  associatedtype ResponseType
  var endpoint: Swift.String { get }
  var baseURL: Swift.String { get }
  var method: Alamofire.HTTPMethod { get }
  var encoding: Alamofire.ParameterEncoding { get }
  var parameters: [Swift.String : Any]? { get }
  var headers: Alamofire.HTTPHeaders { get }
  var uploadData: Foundation.Data { get }
  var networkClient: NetworkClientType { get }
  var mimeType: Swift.String { get }
  var downloadProgress: Alamofire.DownloadRequest.ProgressHandler { get }
  var downloadFileDestination: Alamofire.DownloadRequest.Destination { get }
}
extension NetworkRequest {
  public var baseURL: Swift.String {
    get
  }
  public var url: Swift.String {
    get
  }
  public var method: Alamofire.HTTPMethod {
    get
  }
  public var encoding: Alamofire.ParameterEncoding {
    get
  }
  public var parameters: [Swift.String : Any]? {
    get
  }
  public var headers: Alamofire.HTTPHeaders {
    get
  }
  public var uploadData: Foundation.Data {
    get
  }
  public var networkClient: NetworkClientType {
    get
  }
  public var mimeType: Swift.String {
    get
  }
  public var downloadProgress: Alamofire.DownloadRequest.ProgressHandler {
    get
  }
  public var downloadFileDestination: Alamofire.DownloadRequest.Destination {
    get
  }
}
public struct CustomizedEncoding : Alamofire.ParameterEncoding {
  public func encode(_ urlRequest: Alamofire.URLRequestConvertible, with parameters: Alamofire.Parameters?) throws -> Foundation.URLRequest
}
extension NetworkRequest where Self.ResponseType == IgnorableResult {
  public var responseHandler: (Foundation.Data) throws -> PromiseKit.Promise<IgnorableResult> {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class IMLinkPreviewSectionController : IGListKit.ListSectionController {
  final public var isOutgoingMessage: Swift.Bool
  @objc override final public func numberOfItems() -> Swift.Int
  @objc override final public func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override final public func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override final public func didUpdate(to object: Any)
  @objc override final public func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
public enum IMMediaUploaderError : Swift.Error {
  case noData
  public static func == (a: IMMediaUploaderError, b: IMMediaUploaderError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class IMMediaUploader {
  public static let shared: IMMediaUploader
  public var progressDelegates: [Swift.String : IMProgressDelegateBox]
  public var providers: [Swift.String : [IMMoyaProvider<IMService>]]
  open func uploadImage(_ image: IMImage) -> PromiseKit.Promise<(originURL: Foundation.URL, thumbnailURL: Foundation.URL)>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMVideoMessageCollectionViewCell : IMMessageCollectionViewCell, IMProgressDelegate {
  open var imageView: UIKit.UIImageView {
    get
    set
  }
  open var isCircularProgressButtonInitiated: Swift.Bool
  open var circularProgressButton: IMCircularProgressButton {
    get
    set
  }
  open var playButton: UIKit.UIButton {
    get
    set
  }
  open var durationLabel: UIKit.UILabel {
    get
    set
  }
  open var bubbleViewWidthConstraint: SnapKit.Constraint?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  override open func updateUI()
  open func setProgress(_ progress: Swift.Double)
  @objc open func handleProgressButtonTapped(recognizer: UIKit.UITapGestureRecognizer)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMVideoMessageCollectionViewCellIncoming : IMVideoMessageCollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMVideoMessageCollectionViewCellOutgoing : IMVideoMessageCollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMCircularProgressButton : UIKit.UIButton {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func setProgress(_ progress: Swift.Float, animated: Swift.Bool)
  @objc deinit
}
public enum IMUtilityType : Swift.CaseIterable {
  case Location
  case File
  case Translation
  public static func == (a: IMUtilityType, b: IMUtilityType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [IMUtilityType]
  public static var allCases: [IMUtilityType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class IMUtilityInputViewController : UIKit.UIInputViewController {
  weak public var viewController: UIKit.UIViewController?
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension IMUtilityInputViewController : UIKit.UICollectionViewDelegate {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension IMUtilityInputViewController : UIKit.UICollectionViewDataSource {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension IMUtilityInputViewController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic open func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
@objc @_inheritsConvenienceInitializers final public class IMUtilityCollectionViewCell : UIKit.UICollectionViewCell {
  final public var imageView: UIKit.UIImageView {
    get
    set
  }
  final public var label: UIKit.UILabel {
    get
    set
  }
  @objc override final public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override final public var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  final public var type: IMUtilityType? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override final public func prepareForReuse()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMFileMessageCollectionViewCell : IMMessageCollectionViewCell, IMProgressDelegate {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func prepareForReuse()
  override public func updateUI()
  public func setProgress(_ progress: Swift.Double)
  public func requestDidResponse()
  @objc public func handleProgressButtonTapped(recognizer: UIKit.UITapGestureRecognizer)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMFileMessageCollectionViewCellIncoming : IMFileMessageCollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMFileMessageCollectionViewCellOutgoing : IMFileMessageCollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
final public class IMFetchInvitationsTask : NetworkRequest {
  public typealias ResponseType = IMInvitation
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public func perform() -> PromiseKit.Promise<[IMFetchInvitationsTask.ResponseType]>
  @objc deinit
}
final public class IMFetchMyProfileTask : NetworkRequest {
  public typealias ResponseType = IMUser
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public func perform() -> PromiseKit.Promise<IMFetchMyProfileTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMAudioInputViewController : UIKit.UIInputViewController {
  @objc override final public func viewDidLoad()
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override final public func viewDidLayoutSubviews()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class IMDateCollectionViewCell : UIKit.UICollectionViewCell {
  final public var date: IMDate? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class IMUpdateRoomPrefTask : NetworkRequest {
  public typealias ResponseType = Swift.String
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(id: Swift.String, pref: [Swift.String : Any]) -> PromiseKit.Promise<IMUpdateRoomPrefTask.ResponseType>
  @objc deinit
}
extension String {
  public var IMLocalized: Swift.String {
    get
  }
  public func IMLocalized(_ arguments: Swift.CVarArg...) -> Swift.String
}
@available(*, deprecated, renamed: "IMRemoveMemberTask")
final public class IMDeleteMemberTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public func perform(roomdID: Swift.String, uid: Swift.String) -> PromiseKit.Promise<IMDeleteMemberTask.ResponseType>
  @objc deinit
}
final public class IMRemoveMemberTask : NetworkRequest {
  public typealias ResponseType = Swift.Bool
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(roomdID: Swift.String, uid: Swift.String, isSystemMessageEnabled: Swift.Bool = true) -> PromiseKit.Promise<IMRemoveMemberTask.ResponseType>
  final public func perform(roomdID: Swift.String, uids: [Swift.String], isSystemMessageEnabled: Swift.Bool = true) -> PromiseKit.Promise<IMRemoveMemberTask.ResponseType>
  @objc deinit
}
final public class IMTranslationDetectLanguageTask : NetworkRequest {
  public typealias ResponseType = (Swift.String, Swift.String, Swift.String)
  public init()
  final public var baseURL: Swift.String
  final public var headers: [Swift.String : Swift.String] {
    get
  }
  final public var endpoint: Swift.String {
    get
  }
  final public var encoding: Alamofire.ParameterEncoding {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(messageID: Swift.String, textToDetect: Swift.String) -> PromiseKit.Promise<IMTranslationDetectLanguageTask.ResponseType>
  @objc deinit
}
final public class IMFetchRoomGroupsTask : NetworkRequest {
  public typealias ResponseType = IMRoomGroup
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public func perform() -> PromiseKit.Promise<[IMFetchRoomGroupsTask.ResponseType]>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMButtonsTemplateTableViewCell : IMMessageTableViewCell {
  open var mainImageView: UIKit.UIImageView {
    get
    set
  }
  open var imageHeightConstraint: SnapKit.Constraint?
  open var titleLabel: UIKit.UILabel {
    get
    set
  }
  open var contentLabel: UIKit.UILabel {
    get
    set
  }
  open var contentLabelTopConstraint: SnapKit.Constraint?
  open var line: UIKit.UIView {
    get
    set
  }
  open var buttons: [UIKit.UIButton] {
    get
    set
  }
  open var buttonsHeightConstraints: [SnapKit.Constraint]
  override open func setupUI(_ reuseIdentifier: Swift.String?)
  override open func updateUI()
  @objc open func buttonTapped(_ button: UIKit.UIButton)
  @objc override open func bubbleViewDidLongPress()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class IMUpdateMyProfileTask : NetworkRequest {
  public typealias ResponseType = IMUser
  public init()
  final public var endpoint: Swift.String {
    get
  }
  final public var method: Alamofire.HTTPMethod {
    get
  }
  final public var parameters: [Swift.String : Any]? {
    get
  }
  final public func perform(nickname: Swift.String? = nil, avatarURL: Foundation.URL? = nil, description: Swift.String? = nil) -> PromiseKit.Promise<IMUpdateMyProfileTask.ResponseType>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class IMConfirmTemplateSectionController : IGListKit.ListSectionController, IMMessageSectionController, IMMessageCellDelegate {
  weak public var message: IMMessage?
  @objc override dynamic open func numberOfItems() -> Swift.Int
  @objc override dynamic open func sizeForItem(at index: Swift.Int) -> CoreGraphics.CGSize
  @objc override dynamic open func cellForItem(at index: Swift.Int) -> UIKit.UICollectionViewCell
  @objc override dynamic open func didUpdate(to object: Any)
  @objc override dynamic open func didSelectItem(at index: Swift.Int)
  @objc override dynamic public init()
  @objc deinit
}
public protocol IMMentionsTableViewDelegate : AnyObject {
  func tableViewDidReload()
  func tableViewDidDismiss()
  func tableViewDidSelect(user: IMUser)
}
@objc @_inheritsConvenienceInitializers open class IMMentionsTableView : UIKit.UITableView {
  public typealias Style = IMStyle.messages.inputAccessory.mentions
  open var closeButton: UIKit.UIButton {
    get
    set
  }
  open var keyword: Swift.String
  open var users: [IMUser]
  open var filteredUsers: [IMUser] {
    get
  }
  weak open var customDelegate: IMMentionsTableViewDelegate?
  @objc override dynamic public init(frame: CoreGraphics.CGRect, style: UIKit.UITableView.Style)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func reloadData()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc open func close()
  @objc deinit
}
extension IMMentionsTableView : UIKit.UITableViewDelegate {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension IMMentionsTableView : UIKit.UITableViewDataSource {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc @_inheritsConvenienceInitializers open class IMMentionTableViewCell : UIKit.UITableViewCell {
  weak open var user: IMUser? {
    get
    set
  }
  open var label: UIKit.UILabel {
    get
    set
  }
  open var avatarView: IMAvatarView {
    get
    set
  }
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  open func setupUI()
  open func updateUI()
  @objc deinit
}
extension IMSocketEventType : Swift.Equatable {}
extension IMSocketEventType : Swift.Hashable {}
extension IMSocketEventType : Swift.RawRepresentable {}
extension IMSocketManager.EncodingType : Swift.Equatable {}
extension IMSocketManager.EncodingType : Swift.Hashable {}
extension IMSocketManager.EncodingType : Swift.RawRepresentable {}
extension IMKitTranslationError : Swift.Equatable {}
extension IMKitTranslationError : Swift.Hashable {}
extension HorizontalAlignment : Swift.Equatable {}
extension HorizontalAlignment : Swift.Hashable {}
extension VerticalAlignment : Swift.Equatable {}
extension VerticalAlignment : Swift.Hashable {}
extension IMRoomsViewController.SearchBarStatus : Swift.Equatable {}
extension IMRoomsViewController.SearchBarStatus : Swift.Hashable {}
extension IMKeyboardType : Swift.Equatable {}
extension IMKeyboardType : Swift.Hashable {}
extension IMMessageActionType : Swift.Equatable {}
extension IMMessageActionType : Swift.Hashable {}
extension IMMessageAction : Swift.Equatable {}
extension IMMessageAction : Swift.Hashable {}
extension IMMessageAction : Swift.RawRepresentable {}
extension IMSystemEventType : Swift.Equatable {}
extension IMSystemEventType : Swift.Hashable {}
extension IMRoomSearchingViewController.Mode : Swift.Equatable {}
extension IMRoomSearchingViewController.Mode : Swift.Hashable {}
extension IMRoomType : Swift.Equatable {}
extension IMRoomType : Swift.Hashable {}
extension IMRoomType : Swift.RawRepresentable {}
extension IMRoomAction : Swift.Equatable {}
extension IMRoomAction : Swift.Hashable {}
extension IMRoomAction : Swift.RawRepresentable {}
extension IMMessageType : Swift.Equatable {}
extension IMMessageType : Swift.Hashable {}
extension IMMessageStatus : Swift.Equatable {}
extension IMMessageStatus : Swift.Hashable {}
extension IMMessageStatus : Swift.RawRepresentable {}
extension IMMessageGroupPosition : Swift.Hashable {}
extension IMMediaUploaderError : Swift.Equatable {}
extension IMMediaUploaderError : Swift.Hashable {}
extension IMUtilityType : Swift.Equatable {}
extension IMUtilityType : Swift.Hashable {}
